
Bluetooth_remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000764  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000682  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000413  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001bd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ea       	ldi	r30, 0xA0	; 160
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  8e:	0c 94 ce 01 	jmp	0x39c	; 0x39c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <delay_ms>:
							{'SW20','SW30'},
							{'SW21','SW31'},
							{'SW22','SW32'},
							{'SW2','SW3'},
};
void delay_ms(int x){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <delay_ms+0x6>
  9c:	1f 92       	push	r1
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	9b 83       	std	Y+3, r25	; 0x03
  a4:	8a 83       	std	Y+2, r24	; 0x02
	TCCR1A = 0x00; // CTC TOP = OCR1A
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	fc 01       	movw	r30, r24
  ac:	10 82       	st	Z, r1
	TCCR1B = 0x01; // no prescaler
  ae:	81 e8       	ldi	r24, 0x81	; 129
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	fc 01       	movw	r30, r24
  b6:	20 83       	st	Z, r18
	//65536-16000=C180
	TCNT1H = 0xC1;
  b8:	85 e8       	ldi	r24, 0x85	; 133
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	21 ec       	ldi	r18, 0xC1	; 193
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	TCNT1L = 0x80;
  c2:	84 e8       	ldi	r24, 0x84	; 132
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	20 e8       	ldi	r18, 0x80	; 128
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
	//1 cycle 1ms
	unsigned char count = 0;
  cc:	19 82       	std	Y+1, r1	; 0x01
	while (count < x)
  ce:	13 c0       	rjmp	.+38     	; 0xf6 <delay_ms+0x60>
	{
		while(!(TIFR1 & (1<<TOV1))) ;
  d0:	00 00       	nop
  d2:	86 e3       	ldi	r24, 0x36	; 54
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	fc 01       	movw	r30, r24
  d8:	80 81       	ld	r24, Z
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	81 70       	andi	r24, 0x01	; 1
  e0:	99 27       	eor	r25, r25
  e2:	89 2b       	or	r24, r25
  e4:	b1 f3       	breq	.-20     	; 0xd2 <delay_ms+0x3c>
		TIFR1 = (1<<TOV1);
  e6:	86 e3       	ldi	r24, 0x36	; 54
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
		count++;
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	89 83       	std	Y+1, r24	; 0x01
	//65536-16000=C180
	TCNT1H = 0xC1;
	TCNT1L = 0x80;
	//1 cycle 1ms
	unsigned char count = 0;
	while (count < x)
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	28 2f       	mov	r18, r24
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	28 17       	cp	r18, r24
 102:	39 07       	cpc	r19, r25
 104:	2c f3       	brlt	.-54     	; 0xd0 <delay_ms+0x3a>
	{
		while(!(TIFR1 & (1<<TOV1))) ;
		TIFR1 = (1<<TOV1);
		count++;
	}
	TCCR1B=0;
 106:	81 e8       	ldi	r24, 0x81	; 129
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fc 01       	movw	r30, r24
 10c:	10 82       	st	Z, r1
}
 10e:	00 00       	nop
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <usart_init>:
void usart_init (void){
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
	UCSR0B=(1<<TXEN0) | (1<<RXEN0);
 124:	81 ec       	ldi	r24, 0xC1	; 193
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	28 e1       	ldi	r18, 0x18	; 24
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
	UCSR0C=(1<<UCSZ01) | (1<<UCSZ00);
 12e:	82 ec       	ldi	r24, 0xC2	; 194
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	26 e0       	ldi	r18, 0x06	; 6
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
	UBRR0L=0X67;//baud rate 9600
 138:	84 ec       	ldi	r24, 0xC4	; 196
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	27 e6       	ldi	r18, 0x67	; 103
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
}
 142:	00 00       	nop
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <usart_send>:
void usart_send (unsigned char ch){
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	1f 92       	push	r1
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
 154:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSR0A & (1<<UDRE0)));
 156:	00 00       	nop
 158:	80 ec       	ldi	r24, 0xC0	; 192
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	88 2f       	mov	r24, r24
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	80 72       	andi	r24, 0x20	; 32
 166:	99 27       	eor	r25, r25
 168:	89 2b       	or	r24, r25
 16a:	b1 f3       	breq	.-20     	; 0x158 <usart_send+0xe>
	UDR0=ch;
 16c:	86 ec       	ldi	r24, 0xC6	; 198
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	29 81       	ldd	r18, Y+1	; 0x01
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18
}
 176:	00 00       	nop
 178:	0f 90       	pop	r0
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <main>:

int main(void){
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	27 97       	sbiw	r28, 0x07	; 7
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
	//DDRB|=0b00000111; //set pb0-pb2 as output pins
	//DDRD&=0b11110011; //set pd2 and pd3 as input pins
	//PORTB&=0b11111000; //pb0-pb2 output 0;
	//PORTD&=0b11110011;  //pull-up pd2 and pd3 
	
	DDRD= 0x00 ; //input PORTD2-3
 194:	8a e2       	ldi	r24, 0x2A	; 42
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	fc 01       	movw	r30, r24
 19a:	10 82       	st	Z, r1
	PORTD=0xFF;
 19c:	8b e2       	ldi	r24, 0x2B	; 43
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18
	DDRB=0xFF; //output PORTB0-2
 1a6:	84 e2       	ldi	r24, 0x24	; 36
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
	PORTB=0x00;
 1b0:	85 e2       	ldi	r24, 0x25	; 37
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	fc 01       	movw	r30, r24
 1b6:	10 82       	st	Z, r1
	
	usart_init();
 1b8:	0e 94 8e 00 	call	0x11c	; 0x11c <usart_init>
	//usart_send('a');
	while(1){
		do 
		{
			PORTB&=0b11111000; //ground all rows at once
 1bc:	85 e2       	ldi	r24, 0x25	; 37
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	25 e2       	ldi	r18, 0x25	; 37
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	20 81       	ld	r18, Z
 1c8:	28 7f       	andi	r18, 0xF8	; 248
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
			//delay_ms(50);
			column= (PIND & 0x0C); //read the column
 1ce:	89 e2       	ldi	r24, 0x29	; 41
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	fc 01       	movw	r30, r24
 1d4:	80 81       	ld	r24, Z
 1d6:	8c 70       	andi	r24, 0x0C	; 12
 1d8:	8f 83       	std	Y+7, r24	; 0x07
			//usart_send('z'); //for debugging
		} while (column!=0x0C); //check if all keys are released
 1da:	8f 81       	ldd	r24, Y+7	; 0x07
 1dc:	8c 30       	cpi	r24, 0x0C	; 12
 1de:	71 f7       	brne	.-36     	; 0x1bc <main+0x3c>
		do 
		{
			do
			{	
				//usart_send('y'); //for debugging
				delay_ms(15);
 1e0:	8f e0       	ldi	r24, 0x0F	; 15
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 4b 00 	call	0x96	; 0x96 <delay_ms>
				column=(PIND & 0x0C);
 1e8:	89 e2       	ldi	r24, 0x29	; 41
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	8c 70       	andi	r24, 0x0C	; 12
 1f2:	8f 83       	std	Y+7, r24	; 0x07
			} while (column==0x0C);
 1f4:	8f 81       	ldd	r24, Y+7	; 0x07
 1f6:	8c 30       	cpi	r24, 0x0C	; 12
 1f8:	99 f3       	breq	.-26     	; 0x1e0 <main+0x60>
			
			//usart_send('x'); //for debugging
			delay_ms(15);
 1fa:	8f e0       	ldi	r24, 0x0F	; 15
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 4b 00 	call	0x96	; 0x96 <delay_ms>
			column=(PIND & 0x0C);
 202:	89 e2       	ldi	r24, 0x29	; 41
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	80 81       	ld	r24, Z
 20a:	8c 70       	andi	r24, 0x0C	; 12
 20c:	8f 83       	std	Y+7, r24	; 0x07
		} while (column==0x0C);
 20e:	8f 81       	ldd	r24, Y+7	; 0x07
 210:	8c 30       	cpi	r24, 0x0C	; 12
 212:	31 f3       	breq	.-52     	; 0x1e0 <main+0x60>
		
		while(1){
			int count=0; //for distinguish SW2
 214:	1e 82       	std	Y+6, r1	; 0x06
 216:	1d 82       	std	Y+5, r1	; 0x05
			
			PORTB=0xFE; //ground pb0
 218:	85 e2       	ldi	r24, 0x25	; 37
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	2e ef       	ldi	r18, 0xFE	; 254
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
			delay_ms(10);
 222:	8a e0       	ldi	r24, 0x0A	; 10
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 4b 00 	call	0x96	; 0x96 <delay_ms>
			column=(PIND&0x0C);
 22a:	89 e2       	ldi	r24, 0x29	; 41
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	fc 01       	movw	r30, r24
 230:	80 81       	ld	r24, Z
 232:	8c 70       	andi	r24, 0x0C	; 12
 234:	8f 83       	std	Y+7, r24	; 0x07
			if (column!=0x0C)
 236:	8f 81       	ldd	r24, Y+7	; 0x07
 238:	8c 30       	cpi	r24, 0x0C	; 12
 23a:	89 f0       	breq	.+34     	; 0x25e <main+0xde>
			{
				row=0;
 23c:	1c 82       	std	Y+4, r1	; 0x04
 23e:	1b 82       	std	Y+3, r1	; 0x03
				count++;
 240:	8d 81       	ldd	r24, Y+5	; 0x05
 242:	9e 81       	ldd	r25, Y+6	; 0x06
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	9e 83       	std	Y+6, r25	; 0x06
 248:	8d 83       	std	Y+5, r24	; 0x05
				if (column==0x08)
 24a:	8f 81       	ldd	r24, Y+7	; 0x07
 24c:	88 30       	cpi	r24, 0x08	; 8
 24e:	19 f4       	brne	.+6      	; 0x256 <main+0xd6>
				{
					col=0;
 250:	1a 82       	std	Y+2, r1	; 0x02
 252:	19 82       	std	Y+1, r1	; 0x01
 254:	04 c0       	rjmp	.+8      	; 0x25e <main+0xde>
				}
				else
				{
					col=1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	9a 83       	std	Y+2, r25	; 0x02
 25c:	89 83       	std	Y+1, r24	; 0x01
				}
				//usart_send('0');
			}
			
			PORTB=0xFD; //ground pb1
 25e:	85 e2       	ldi	r24, 0x25	; 37
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	2d ef       	ldi	r18, 0xFD	; 253
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
			delay_ms(10);
 268:	8a e0       	ldi	r24, 0x0A	; 10
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 4b 00 	call	0x96	; 0x96 <delay_ms>
			column=(PIND&0x0C);
 270:	89 e2       	ldi	r24, 0x29	; 41
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	fc 01       	movw	r30, r24
 276:	80 81       	ld	r24, Z
 278:	8c 70       	andi	r24, 0x0C	; 12
 27a:	8f 83       	std	Y+7, r24	; 0x07
			if (column!=0x0C)
 27c:	8f 81       	ldd	r24, Y+7	; 0x07
 27e:	8c 30       	cpi	r24, 0x0C	; 12
 280:	99 f0       	breq	.+38     	; 0x2a8 <main+0x128>
			{
				row=1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	9c 83       	std	Y+4, r25	; 0x04
 288:	8b 83       	std	Y+3, r24	; 0x03
				if (column==0x08)
 28a:	8f 81       	ldd	r24, Y+7	; 0x07
 28c:	88 30       	cpi	r24, 0x08	; 8
 28e:	19 f4       	brne	.+6      	; 0x296 <main+0x116>
				{
					col=0;
 290:	1a 82       	std	Y+2, r1	; 0x02
 292:	19 82       	std	Y+1, r1	; 0x01
 294:	04 c0       	rjmp	.+8      	; 0x29e <main+0x11e>
				}
				else
				{
					col=1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	9a 83       	std	Y+2, r25	; 0x02
 29c:	89 83       	std	Y+1, r24	; 0x01
				}
				count++;
 29e:	8d 81       	ldd	r24, Y+5	; 0x05
 2a0:	9e 81       	ldd	r25, Y+6	; 0x06
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	9e 83       	std	Y+6, r25	; 0x06
 2a6:	8d 83       	std	Y+5, r24	; 0x05
				//usart_send('1');
			}
			
			PORTB=0xFB; //ground pb2
 2a8:	85 e2       	ldi	r24, 0x25	; 37
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	2b ef       	ldi	r18, 0xFB	; 251
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
			delay_ms(10);
 2b2:	8a e0       	ldi	r24, 0x0A	; 10
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 4b 00 	call	0x96	; 0x96 <delay_ms>
			column=(PIND&0x0C);
 2ba:	89 e2       	ldi	r24, 0x29	; 41
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	fc 01       	movw	r30, r24
 2c0:	80 81       	ld	r24, Z
 2c2:	8c 70       	andi	r24, 0x0C	; 12
 2c4:	8f 83       	std	Y+7, r24	; 0x07
			if (column!=0x0C)
 2c6:	8f 81       	ldd	r24, Y+7	; 0x07
 2c8:	8c 30       	cpi	r24, 0x0C	; 12
 2ca:	99 f0       	breq	.+38     	; 0x2f2 <main+0x172>
			{
				row=2;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	9c 83       	std	Y+4, r25	; 0x04
 2d2:	8b 83       	std	Y+3, r24	; 0x03
				if (column==0x08)
 2d4:	8f 81       	ldd	r24, Y+7	; 0x07
 2d6:	88 30       	cpi	r24, 0x08	; 8
 2d8:	19 f4       	brne	.+6      	; 0x2e0 <main+0x160>
				{
					col=0;
 2da:	1a 82       	std	Y+2, r1	; 0x02
 2dc:	19 82       	std	Y+1, r1	; 0x01
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <main+0x168>
				}
				else
				{
					col=1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	9a 83       	std	Y+2, r25	; 0x02
 2e6:	89 83       	std	Y+1, r24	; 0x01
				}
				count++;
 2e8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ea:	9e 81       	ldd	r25, Y+6	; 0x06
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	9e 83       	std	Y+6, r25	; 0x06
 2f0:	8d 83       	std	Y+5, r24	; 0x05
				//usart_send('2');
			}
			

			if(count==3){
 2f2:	8d 81       	ldd	r24, Y+5	; 0x05
 2f4:	9e 81       	ldd	r25, Y+6	; 0x06
 2f6:	03 97       	sbiw	r24, 0x03	; 3
 2f8:	29 f4       	brne	.+10     	; 0x304 <main+0x184>
				row=3;
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	9c 83       	std	Y+4, r25	; 0x04
 300:	8b 83       	std	Y+3, r24	; 0x03
				//usart_send('3');
				break;
 302:	01 c0       	rjmp	.+2      	; 0x306 <main+0x186>
			}else {break;}
 304:	00 00       	nop
		}
		//usart_send('b')	;
		//save result to portD
		
		if (col==0)
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	9a 81       	ldd	r25, Y+2	; 0x02
 30a:	89 2b       	or	r24, r25
 30c:	09 f5       	brne	.+66     	; 0x350 <main+0x1d0>
		{
			if(row==0){
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	9c 81       	ldd	r25, Y+4	; 0x04
 312:	89 2b       	or	r24, r25
 314:	21 f4       	brne	.+8      	; 0x31e <main+0x19e>
				usart_send('d');
 316:	84 e6       	ldi	r24, 0x64	; 100
 318:	0e 94 a5 00 	call	0x14a	; 0x14a <usart_send>
 31c:	4f cf       	rjmp	.-354    	; 0x1bc <main+0x3c>
			}
			else if(row==1){
 31e:	8b 81       	ldd	r24, Y+3	; 0x03
 320:	9c 81       	ldd	r25, Y+4	; 0x04
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	21 f4       	brne	.+8      	; 0x32e <main+0x1ae>
				usart_send('s');
 326:	83 e7       	ldi	r24, 0x73	; 115
 328:	0e 94 a5 00 	call	0x14a	; 0x14a <usart_send>
 32c:	47 cf       	rjmp	.-370    	; 0x1bc <main+0x3c>
			}
			else if(row==2){
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	9c 81       	ldd	r25, Y+4	; 0x04
 332:	02 97       	sbiw	r24, 0x02	; 2
 334:	21 f4       	brne	.+8      	; 0x33e <main+0x1be>
				usart_send('a');
 336:	81 e6       	ldi	r24, 0x61	; 97
 338:	0e 94 a5 00 	call	0x14a	; 0x14a <usart_send>
 33c:	3f cf       	rjmp	.-386    	; 0x1bc <main+0x3c>
			}
			else if(row==3){
 33e:	8b 81       	ldd	r24, Y+3	; 0x03
 340:	9c 81       	ldd	r25, Y+4	; 0x04
 342:	03 97       	sbiw	r24, 0x03	; 3
 344:	09 f0       	breq	.+2      	; 0x348 <main+0x1c8>
 346:	3a cf       	rjmp	.-396    	; 0x1bc <main+0x3c>
				usart_send('w');
 348:	87 e7       	ldi	r24, 0x77	; 119
 34a:	0e 94 a5 00 	call	0x14a	; 0x14a <usart_send>
 34e:	36 cf       	rjmp	.-404    	; 0x1bc <main+0x3c>
			}
			//PORTD=keypad[row][0];
		}
		else if(col==1){
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	9a 81       	ldd	r25, Y+2	; 0x02
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	09 f0       	breq	.+2      	; 0x35a <main+0x1da>
 358:	31 cf       	rjmp	.-414    	; 0x1bc <main+0x3c>
			//PORTD=keypad[row][1];
			if(row==0){
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	9c 81       	ldd	r25, Y+4	; 0x04
 35e:	89 2b       	or	r24, r25
 360:	21 f4       	brne	.+8      	; 0x36a <main+0x1ea>
				usart_send('j');
 362:	8a e6       	ldi	r24, 0x6A	; 106
 364:	0e 94 a5 00 	call	0x14a	; 0x14a <usart_send>
 368:	29 cf       	rjmp	.-430    	; 0x1bc <main+0x3c>
			}
			else if(row==1){
 36a:	8b 81       	ldd	r24, Y+3	; 0x03
 36c:	9c 81       	ldd	r25, Y+4	; 0x04
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	21 f4       	brne	.+8      	; 0x37a <main+0x1fa>
				usart_send('l');
 372:	8c e6       	ldi	r24, 0x6C	; 108
 374:	0e 94 a5 00 	call	0x14a	; 0x14a <usart_send>
 378:	21 cf       	rjmp	.-446    	; 0x1bc <main+0x3c>
			}
			else if(row==2){
 37a:	8b 81       	ldd	r24, Y+3	; 0x03
 37c:	9c 81       	ldd	r25, Y+4	; 0x04
 37e:	02 97       	sbiw	r24, 0x02	; 2
 380:	21 f4       	brne	.+8      	; 0x38a <main+0x20a>
				usart_send('k');
 382:	8b e6       	ldi	r24, 0x6B	; 107
 384:	0e 94 a5 00 	call	0x14a	; 0x14a <usart_send>
 388:	19 cf       	rjmp	.-462    	; 0x1bc <main+0x3c>
			}
			else if(row==3){
 38a:	8b 81       	ldd	r24, Y+3	; 0x03
 38c:	9c 81       	ldd	r25, Y+4	; 0x04
 38e:	03 97       	sbiw	r24, 0x03	; 3
 390:	09 f0       	breq	.+2      	; 0x394 <main+0x214>
 392:	14 cf       	rjmp	.-472    	; 0x1bc <main+0x3c>
				usart_send('i');
 394:	89 e6       	ldi	r24, 0x69	; 105
 396:	0e 94 a5 00 	call	0x14a	; 0x14a <usart_send>
			}
		}
		
	}
 39a:	10 cf       	rjmp	.-480    	; 0x1bc <main+0x3c>

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
