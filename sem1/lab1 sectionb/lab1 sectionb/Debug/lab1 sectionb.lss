
lab1 sectionb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d0  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000634  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028d  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000015a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001637  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 89 00 	call	0x112	; 0x112 <main>
  78:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <T0Delay>:
 * Author : Fei
 */ 

#include <avr/io.h>

void T0Delay(){ 
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <T0Delay+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <T0Delay+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	TCNT0=0;
  8c:	86 e4       	ldi	r24, 0x46	; 70
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	fc 01       	movw	r30, r24
  92:	10 82       	st	Z, r1
	TCCR0A=0;
  94:	84 e4       	ldi	r24, 0x44	; 68
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	fc 01       	movw	r30, r24
  9a:	10 82       	st	Z, r1
	TCCR0B=0x01;
  9c:	85 e4       	ldi	r24, 0x45	; 69
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
	//1 machine cycle=1/16MHz=0.025us
	//from 0 to FF, there are 255+1=256 machine cycle
	//a whole preiod of timer0 last 0.0625*256=16us
	//1/16us=62500 machine cycle
	for(int i=0;i!=40;i++){
  a6:	1a 82       	std	Y+2, r1	; 0x02
  a8:	19 82       	std	Y+1, r1	; 0x01
  aa:	23 c0       	rjmp	.+70     	; 0xf2 <T0Delay+0x72>
		for(int j=0;j!=625;j++){
  ac:	1c 82       	std	Y+4, r1	; 0x04
  ae:	1b 82       	std	Y+3, r1	; 0x03
  b0:	16 c0       	rjmp	.+44     	; 0xde <T0Delay+0x5e>
			while((TIFR0&=(1<<TOV0))==0);//256mc
  b2:	00 00       	nop
  b4:	85 e3       	ldi	r24, 0x35	; 53
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	25 e3       	ldi	r18, 0x35	; 53
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	f9 01       	movw	r30, r18
  be:	20 81       	ld	r18, Z
  c0:	21 70       	andi	r18, 0x01	; 1
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
  c6:	22 23       	and	r18, r18
  c8:	a9 f3       	breq	.-22     	; 0xb4 <T0Delay+0x34>
			TIFR0=(1<<TOV0);
  ca:	85 e3       	ldi	r24, 0x35	; 53
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
	//1 machine cycle=1/16MHz=0.025us
	//from 0 to FF, there are 255+1=256 machine cycle
	//a whole preiod of timer0 last 0.0625*256=16us
	//1/16us=62500 machine cycle
	for(int i=0;i!=40;i++){
		for(int j=0;j!=625;j++){
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	9c 81       	ldd	r25, Y+4	; 0x04
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	9c 83       	std	Y+4, r25	; 0x04
  dc:	8b 83       	std	Y+3, r24	; 0x03
  de:	8b 81       	ldd	r24, Y+3	; 0x03
  e0:	9c 81       	ldd	r25, Y+4	; 0x04
  e2:	81 37       	cpi	r24, 0x71	; 113
  e4:	92 40       	sbci	r25, 0x02	; 2
  e6:	29 f7       	brne	.-54     	; 0xb2 <T0Delay+0x32>
	TCCR0B=0x01;
	//1 machine cycle=1/16MHz=0.025us
	//from 0 to FF, there are 255+1=256 machine cycle
	//a whole preiod of timer0 last 0.0625*256=16us
	//1/16us=62500 machine cycle
	for(int i=0;i!=40;i++){
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	9a 81       	ldd	r25, Y+2	; 0x02
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	9a 83       	std	Y+2, r25	; 0x02
  f0:	89 83       	std	Y+1, r24	; 0x01
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
  f6:	88 97       	sbiw	r24, 0x28	; 40
  f8:	c9 f6       	brne	.-78     	; 0xac <T0Delay+0x2c>
		for(int j=0;j!=625;j++){
			while((TIFR0&=(1<<TOV0))==0);//256mc
			TIFR0=(1<<TOV0);
			}
	}
	TCCR0B=0;
  fa:	85 e4       	ldi	r24, 0x45	; 69
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	10 82       	st	Z, r1
	
}
 102:	00 00       	nop
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <main>:
int main(void){
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	00 d0       	rcall	.+0      	; 0x118 <main+0x6>
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
	DDRB=0x01;
 11c:	84 e2       	ldi	r24, 0x24	; 36
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
	DDRD=0xFF;
 126:	8a e2       	ldi	r24, 0x2A	; 42
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
	int count=0;
 130:	1a 82       	std	Y+2, r1	; 0x02
 132:	19 82       	std	Y+1, r1	; 0x01
	
    while (1) {
		if(PINB&(1<<0)){
 134:	83 e2       	ldi	r24, 0x23	; 35
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	fc 01       	movw	r30, r24
 13a:	80 81       	ld	r24, Z
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	81 70       	andi	r24, 0x01	; 1
 142:	99 27       	eor	r25, r25
 144:	89 2b       	or	r24, r25
 146:	b1 f3       	breq	.-20     	; 0x134 <main+0x22>
			T0Delay();
 148:	0e 94 40 00 	call	0x80	; 0x80 <T0Delay>
			++count;
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9a 81       	ldd	r25, Y+2	; 0x02
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	9a 83       	std	Y+2, r25	; 0x02
 154:	89 83       	std	Y+1, r24	; 0x01
			if((count%2)!=0){
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	81 70       	andi	r24, 0x01	; 1
 15c:	99 27       	eor	r25, r25
 15e:	89 2b       	or	r24, r25
 160:	31 f0       	breq	.+12     	; 0x16e <main+0x5c>
				PORTD=0xFF;
 162:	8b e2       	ldi	r24, 0x2B	; 43
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	fc 01       	movw	r30, r24
 16a:	20 83       	st	Z, r18
 16c:	e3 cf       	rjmp	.-58     	; 0x134 <main+0x22>
			}
			else{
				PORTD=0;
 16e:	8b e2       	ldi	r24, 0x2B	; 43
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	10 82       	st	Z, r1
			}
		}
	}
 176:	de cf       	rjmp	.-68     	; 0x134 <main+0x22>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
