
quiz1aq2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000818  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ac  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000313  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036f  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c8  00000000  00000000  0000180b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000018d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  78:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <CTCModeDelay>:
 * Author : Fei
 */ 

#include <avr/io.h>

void CTCModeDelay(int x){
  80:	fc 01       	movw	r30, r24
	OCR0A=199;
  82:	97 ec       	ldi	r25, 0xC7	; 199
  84:	97 bd       	out	0x27, r25	; 39
	TCCR0A=0x02;
  86:	92 e0       	ldi	r25, 0x02	; 2
  88:	94 bd       	out	0x24, r25	; 36
	TCCR0B=0x01;
  8a:	91 e0       	ldi	r25, 0x01	; 1
  8c:	95 bd       	out	0x25, r25	; 37
	//for every second, 16M/200=80000=800x100
	for(int c=0;c!=x;++c){
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	17 c0       	rjmp	.+46     	; 0xc2 <CTCModeDelay+0x42>
		for(int a=0;a!=100;++a){
			for(int b=0;b!=800;++b){
				while((TIFR0&(1<<1))==0);
  94:	a9 9b       	sbis	0x15, 1	; 21
  96:	fe cf       	rjmp	.-4      	; 0x94 <CTCModeDelay+0x14>
				TIFR0=(1<<OCF0A);
  98:	92 e0       	ldi	r25, 0x02	; 2
  9a:	95 bb       	out	0x15, r25	; 21
	TCCR0A=0x02;
	TCCR0B=0x01;
	//for every second, 16M/200=80000=800x100
	for(int c=0;c!=x;++c){
		for(int a=0;a!=100;++a){
			for(int b=0;b!=800;++b){
  9c:	2f 5f       	subi	r18, 0xFF	; 255
  9e:	3f 4f       	sbci	r19, 0xFF	; 255
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <CTCModeDelay+0x26>
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	20 32       	cpi	r18, 0x20	; 32
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	38 07       	cpc	r19, r24
  ac:	99 f7       	brne	.-26     	; 0x94 <CTCModeDelay+0x14>
	OCR0A=199;
	TCCR0A=0x02;
	TCCR0B=0x01;
	//for every second, 16M/200=80000=800x100
	for(int c=0;c!=x;++c){
		for(int a=0;a!=100;++a){
  ae:	6f 5f       	subi	r22, 0xFF	; 255
  b0:	7f 4f       	sbci	r23, 0xFF	; 255
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <CTCModeDelay+0x38>
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	64 36       	cpi	r22, 0x64	; 100
  ba:	71 05       	cpc	r23, r1
  bc:	91 f7       	brne	.-28     	; 0xa2 <CTCModeDelay+0x22>
void CTCModeDelay(int x){
	OCR0A=199;
	TCCR0A=0x02;
	TCCR0B=0x01;
	//for every second, 16M/200=80000=800x100
	for(int c=0;c!=x;++c){
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	4e 17       	cp	r20, r30
  c4:	5f 07       	cpc	r21, r31
  c6:	b1 f7       	brne	.-20     	; 0xb4 <CTCModeDelay+0x34>
				while((TIFR0&(1<<1))==0);
				TIFR0=(1<<OCF0A);
			}
		}
	}
	TCCR0B = 0;
  c8:	15 bc       	out	0x25, r1	; 37
  ca:	08 95       	ret

000000cc <setup>:
}

void setup(){
	DDRC=0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	87 b9       	out	0x07, r24	; 7
	TCCR1A=0;
  d0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=0x0F;//CTC mode,clock on rising edge //0x0F work
  d4:	8f e0       	ldi	r24, 0x0F	; 15
  d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A=0x02;//count 3, form 0 to 2
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  e6:	08 95       	ret

000000e8 <stage1>:
}


void stage1(){
	CTCModeDelay(1);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 40 00 	call	0x80	; 0x80 <CTCModeDelay>
	PORTC=0x03;
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	88 b9       	out	0x08, r24	; 8
	CTCModeDelay(1);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 40 00 	call	0x80	; 0x80 <CTCModeDelay>
	PORTC=0x01;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	88 b9       	out	0x08, r24	; 8
	CTCModeDelay(1);
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 40 00 	call	0x80	; 0x80 <CTCModeDelay>
	PORTC=0;  
 108:	18 b8       	out	0x08, r1	; 8
	CTCModeDelay(1);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 40 00 	call	0x80	; 0x80 <CTCModeDelay>
	PORTC=0x02;
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	88 b9       	out	0x08, r24	; 8
 116:	08 95       	ret

00000118 <stage2>:
	
}
	
void stage2(){
	CTCModeDelay(1);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 40 00 	call	0x80	; 0x80 <CTCModeDelay>
	PORTC=0;
 120:	18 b8       	out	0x08, r1	; 8
	CTCModeDelay(1);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 40 00 	call	0x80	; 0x80 <CTCModeDelay>
	PORTC=0x03;
 12a:	83 e0       	ldi	r24, 0x03	; 3
 12c:	88 b9       	out	0x08, r24	; 8
	CTCModeDelay(1);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 40 00 	call	0x80	; 0x80 <CTCModeDelay>
	PORTC=0x01;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	88 b9       	out	0x08, r24	; 8
	CTCModeDelay(1);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 40 00 	call	0x80	; 0x80 <CTCModeDelay>
	PORTC=0x02;
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	88 b9       	out	0x08, r24	; 8
 146:	08 95       	ret

00000148 <main>:
	
}
int main(void)
{
	setup();
 148:	0e 94 66 00 	call	0xcc	; 0xcc <setup>
	while(1)
	{
		do 
		{
			if(count==0){
				stage1();
 14c:	0e 94 74 00 	call	0xe8	; 0xe8 <stage1>
				++count;
			}
			if(count!=0){
				stage2();
 150:	0e 94 8c 00 	call	0x118	; 0x118 <stage2>
				count=0;
			}
		} while ((TIFR1&(1<<OCF1A))==0);
 154:	86 b3       	in	r24, 0x16	; 22
 156:	fa cf       	rjmp	.-12     	; 0x14c <main+0x4>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
