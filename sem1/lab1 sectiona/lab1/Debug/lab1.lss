
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ec  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063c  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000271  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001160  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033f  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006d  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <T0Delay>:
 */ 

#include <avr/io.h>

void T0Delay(){ 
	TCNT0=0;
  80:	16 bc       	out	0x26, r1	; 38
	TCCR0A=0;
  82:	14 bc       	out	0x24, r1	; 36
	TCCR0B=0x01;
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	85 bd       	out	0x25, r24	; 37
	//1 machine cycle=1/16MHz=0.025us
	//from 0 to FF, there are 255+1=256 machine cycle
	//a whole preiod of timer0 last 0.0625*256=16us
	//1/16us=62500 machine cycle
	for(int i=0;i!=100;i++){
  88:	40 e0       	ldi	r20, 0x00	; 0
  8a:	50 e0       	ldi	r21, 0x00	; 0
  8c:	12 c0       	rjmp	.+36     	; 0xb2 <T0Delay+0x32>
		for(int j=0;j!=625;j++){
			while((TIFR0&=(1<<TOV0))==0);//256mc
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	81 70       	andi	r24, 0x01	; 1
  92:	85 bb       	out	0x15, r24	; 21
  94:	88 23       	and	r24, r24
  96:	d9 f3       	breq	.-10     	; 0x8e <T0Delay+0xe>
			TIFR0=(1<<TOV0);
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	85 bb       	out	0x15, r24	; 21
	//1 machine cycle=1/16MHz=0.025us
	//from 0 to FF, there are 255+1=256 machine cycle
	//a whole preiod of timer0 last 0.0625*256=16us
	//1/16us=62500 machine cycle
	for(int i=0;i!=100;i++){
		for(int j=0;j!=625;j++){
  9c:	2f 5f       	subi	r18, 0xFF	; 255
  9e:	3f 4f       	sbci	r19, 0xFF	; 255
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <T0Delay+0x26>
  a2:	20 e0       	ldi	r18, 0x00	; 0
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	21 37       	cpi	r18, 0x71	; 113
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	38 07       	cpc	r19, r24
  ac:	81 f7       	brne	.-32     	; 0x8e <T0Delay+0xe>
	TCCR0B=0x01;
	//1 machine cycle=1/16MHz=0.025us
	//from 0 to FF, there are 255+1=256 machine cycle
	//a whole preiod of timer0 last 0.0625*256=16us
	//1/16us=62500 machine cycle
	for(int i=0;i!=100;i++){
  ae:	4f 5f       	subi	r20, 0xFF	; 255
  b0:	5f 4f       	sbci	r21, 0xFF	; 255
  b2:	44 36       	cpi	r20, 0x64	; 100
  b4:	51 05       	cpc	r21, r1
  b6:	a9 f7       	brne	.-22     	; 0xa2 <T0Delay+0x22>
		for(int j=0;j!=625;j++){
			while((TIFR0&=(1<<TOV0))==0);//256mc
			TIFR0=(1<<TOV0);
			}
	}
	TCCR0B=0;
  b8:	15 bc       	out	0x25, r1	; 37
  ba:	08 95       	ret

000000bc <main>:
	
}

int main(void){
	DDRD=0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	8a b9       	out	0x0a, r24	; 10
	PORTD=0x55;
  c0:	85 e5       	ldi	r24, 0x55	; 85
  c2:	8b b9       	out	0x0b, r24	; 11
	
    while (1) {
		T0Delay();
  c4:	0e 94 40 00 	call	0x80	; 0x80 <T0Delay>
		char a=PORTD;
  c8:	8b b1       	in	r24, 0x0b	; 11
		PORTD=0;
  ca:	1b b8       	out	0x0b, r1	; 11
		PORTD=a^(0xFF);
  cc:	80 95       	com	r24
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	f9 cf       	rjmp	.-14     	; 0xc4 <main+0x8>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
