
lab4b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001ae  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000727  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000661  00000000  00000000  000009ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027a  00000000  00000000  00001050  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000100  00000000  00000000  0000165a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <string.h>

#define X ((16000000/16/4800) - 1)


int main(void){
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	63 97       	sbiw	r28, 0x13	; 19
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61

	char prologue[]="We Are Ready!";
  aa:	8e e0       	ldi	r24, 0x0E	; 14
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	char r[]= "Bye!";
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	ee e0       	ldi	r30, 0x0E	; 14
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	de 01       	movw	r26, r28
  c4:	1f 96       	adiw	r26, 0x0f	; 15
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	8a 95       	dec	r24
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x30>
	int count=0;
	UBRR0 = X;
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//transmit and receive enable
	UCSR0B = (1 << TXEN0)| (1 << TXCIE0) | (1 << RXEN0) | (1 << RXCIE0);
  da:	88 ed       	ldi	r24, 0xD8	; 216
  dc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	char a=0;
	char b=0;
	
	for (int i = 0; i < strlen(prologue); i++){
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e c0       	rjmp	.+28     	; 0x108 <main+0x72>
		while (( UCSR0A & (1<<UDRE0))  == 0){};
  ec:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f0:	25 ff       	sbrs	r18, 5
  f2:	fc cf       	rjmp	.-8      	; 0xec <main+0x56>
		UDR0 = prologue[i];
  f4:	e1 e0       	ldi	r30, 0x01	; 1
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ec 0f       	add	r30, r28
  fa:	fd 1f       	adc	r31, r29
  fc:	e8 0f       	add	r30, r24
  fe:	f9 1f       	adc	r31, r25
 100:	20 81       	ld	r18, Z
 102:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UCSR0B = (1 << TXEN0)| (1 << TXCIE0) | (1 << RXEN0) | (1 << RXCIE0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
	char a=0;
	char b=0;
	
	for (int i = 0; i < strlen(prologue); i++){
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	de 01       	movw	r26, r28
 10a:	11 96       	adiw	r26, 0x01	; 1
 10c:	fd 01       	movw	r30, r26
 10e:	01 90       	ld	r0, Z+
 110:	00 20       	and	r0, r0
 112:	e9 f7       	brne	.-6      	; 0x10e <main+0x78>
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	ea 1b       	sub	r30, r26
 118:	fb 0b       	sbc	r31, r27
 11a:	8e 17       	cp	r24, r30
 11c:	9f 07       	cpc	r25, r31
 11e:	30 f3       	brcs	.-52     	; 0xec <main+0x56>
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <main+0x96>
					UDR0 = r[i];
				}
			}
		}
		else{
			count=0;
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
		UDR0 = prologue[i];
	}

	while (1){

		while (( UCSR0A & (1<<RXC0))  == 0){};
 12c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 130:	88 23       	and	r24, r24
 132:	e4 f7       	brge	.-8      	; 0x12c <main+0x96>
		count++;
 134:	4f 5f       	subi	r20, 0xFF	; 255
 136:	5f 4f       	sbci	r21, 0xFF	; 255
		if (count==1)
 138:	41 30       	cpi	r20, 0x01	; 1
 13a:	51 05       	cpc	r21, r1
 13c:	19 f4       	brne	.+6      	; 0x144 <main+0xae>
		{
			a=UDR0;
 13e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 142:	f4 cf       	rjmp	.-24     	; 0x12c <main+0x96>
					 //UDR0 = r[i];
				 //}
			//}
		//}
		//有问题，如果ab错位就会出错
		else if ((count==2)&(a=='H'))
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	68 34       	cpi	r22, 0x48	; 72
 148:	09 f0       	breq	.+2      	; 0x14c <main+0xb6>
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	42 30       	cpi	r20, 0x02	; 2
 150:	51 05       	cpc	r21, r1
 152:	09 f0       	breq	.+2      	; 0x156 <main+0xc0>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	89 23       	and	r24, r25
 158:	39 f3       	breq	.-50     	; 0x128 <main+0x92>
		{
			b=UDR0;
 15a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
			if ((a=='H')&(b=='i'))
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	29 36       	cpi	r18, 0x69	; 105
 162:	09 f0       	breq	.+2      	; 0x166 <main+0xd0>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	98 23       	and	r25, r24
 168:	89 f4       	brne	.+34     	; 0x18c <main+0xf6>
 16a:	e0 cf       	rjmp	.-64     	; 0x12c <main+0x96>
			{
				for (int i = 0; i < strlen(r); i++){
					while (( UCSR0A & (1<<UDRE0))  == 0){};
 16c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 170:	85 ff       	sbrs	r24, 5
 172:	fc cf       	rjmp	.-8      	; 0x16c <main+0xd6>
					UDR0 = r[i];
 174:	ef e0       	ldi	r30, 0x0F	; 15
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ec 0f       	add	r30, r28
 17a:	fd 1f       	adc	r31, r29
 17c:	e2 0f       	add	r30, r18
 17e:	f3 1f       	adc	r31, r19
 180:	80 81       	ld	r24, Z
 182:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		else if ((count==2)&(a=='H'))
		{
			b=UDR0;
			if ((a=='H')&(b=='i'))
			{
				for (int i = 0; i < strlen(r); i++){
 186:	2f 5f       	subi	r18, 0xFF	; 255
 188:	3f 4f       	sbci	r19, 0xFF	; 255
 18a:	02 c0       	rjmp	.+4      	; 0x190 <main+0xfa>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	de 01       	movw	r26, r28
 192:	1f 96       	adiw	r26, 0x0f	; 15
 194:	fd 01       	movw	r30, r26
 196:	01 90       	ld	r0, Z+
 198:	00 20       	and	r0, r0
 19a:	e9 f7       	brne	.-6      	; 0x196 <main+0x100>
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	ea 1b       	sub	r30, r26
 1a0:	fb 0b       	sbc	r31, r27
 1a2:	2e 17       	cp	r18, r30
 1a4:	3f 07       	cpc	r19, r31
 1a6:	10 f3       	brcs	.-60     	; 0x16c <main+0xd6>
 1a8:	c1 cf       	rjmp	.-126    	; 0x12c <main+0x96>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
