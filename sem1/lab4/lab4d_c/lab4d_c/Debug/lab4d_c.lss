
lab4d_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fe  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000632  00000000  00000000  000009da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000279  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036a  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c6  00000000  00000000  00001672  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_18>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  88:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_19>:

int state=0;
char a=0;
int count=0;
char b=0;
ISR(USART_UDRE_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
	//state0: keep output "a"
	if (state==0)
  a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state>
  aa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state+0x1>
  ae:	89 2b       	or	r24, r25
  b0:	19 f4       	brne	.+6      	; 0xb8 <__vector_19+0x28>
	{
		UDR0='a';
  b2:	81 e6       	ldi	r24, 0x61	; 97
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
	
	//state1:output the input 10 times
	if ((state==1)&(count!=10))
  b8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <count>
  bc:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <count+0x1>
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <state>
  c6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <state+0x1>
  ca:	41 30       	cpi	r20, 0x01	; 1
  cc:	51 05       	cpc	r21, r1
  ce:	09 f0       	breq	.+2      	; 0xd2 <__vector_19+0x42>
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	2a 30       	cpi	r18, 0x0A	; 10
  d6:	31 05       	cpc	r19, r1
  d8:	09 f4       	brne	.+2      	; 0xdc <__vector_19+0x4c>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	89 23       	and	r24, r25
  de:	e1 f0       	breq	.+56     	; 0x118 <__vector_19+0x88>
	{
		++count;
  e0:	2f 5f       	subi	r18, 0xFF	; 255
  e2:	3f 4f       	sbci	r19, 0xFF	; 255
  e4:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <count+0x1>
  e8:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <count>
		UDR0=a;
  ec:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <a>
  f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		if (count==10)
  f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <count>
  f8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <count+0x1>
  fc:	0a 97       	sbiw	r24, 0x0a	; 10
  fe:	61 f4       	brne	.+24     	; 0x118 <__vector_19+0x88>
		{
			state=2;
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state+0x1>
 108:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
			count=-1;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	9f ef       	ldi	r25, 0xFF	; 255
 110:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <count+0x1>
 114:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <count>
		}
	}
	if (state==2)
 118:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state>
 11c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state+0x1>
 120:	02 97       	sbiw	r24, 0x02	; 2
 122:	71 f4       	brne	.+28     	; 0x140 <__vector_19+0xb0>
	{
		if (b==a){
 124:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 128:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <a>
 12c:	98 13       	cpse	r25, r24
 12e:	08 c0       	rjmp	.+16     	; 0x140 <__vector_19+0xb0>
			state=0;
 130:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <state+0x1>
 134:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state>
			a=b=0;
 138:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <a>
			}
	}
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_18>:
ISR(USART_RX_vect){
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
	if (state==0)
 164:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state>
 168:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state+0x1>
 16c:	89 2b       	or	r24, r25
 16e:	51 f4       	brne	.+20     	; 0x184 <__vector_18+0x2e>
	{
		a=UDR0;
 170:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 174:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <a>
		state=1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state+0x1>
 180:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state>
	}
	if (state==2)
 184:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state>
 188:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state+0x1>
 18c:	02 97       	sbiw	r24, 0x02	; 2
 18e:	21 f4       	brne	.+8      	; 0x198 <__vector_18+0x42>
	{
		b=UDR0;
 190:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 194:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <main>:

int main(void){
	UBRR0 = X;
 1a6:	87 e6       	ldi	r24, 0x67	; 103
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//transmit and receive enable
	UCSR0B = (1 << TXEN0)| (1 << UDRIE0) | (1 << RXEN0) | (1 << RXCIE0);
 1b2:	88 eb       	ldi	r24, 0xB8	; 184
 1b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	sei();
 1be:	78 94       	sei
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <main+0x1a>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
