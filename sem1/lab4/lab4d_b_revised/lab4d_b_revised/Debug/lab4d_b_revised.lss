
lab4d_b_revised.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800114  00800114  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000780  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028c  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a0  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e0  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  9e:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_19>:
char a=0;//save the first character
char b=0;//save the second character
int output_enable=0;//indicate whether output "Bye!"
int count=0;

ISR(USART_UDRE_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
	if (start==true){
  bc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <start>
  c0:	88 23       	and	r24, r24
  c2:	31 f1       	breq	.+76     	; 0x110 <__vector_19+0x6a>
		UDR0=prologue[i++];//udr0=prologue[a],then a+1
  c4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i>
  c8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <i+0x1>
  cc:	9c 01       	movw	r18, r24
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <i+0x1>
  d6:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <i>
  da:	fc 01       	movw	r30, r24
  dc:	eb 5f       	subi	r30, 0xFB	; 251
  de:	fe 4f       	sbci	r31, 0xFE	; 254
  e0:	80 81       	ld	r24, Z
  e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		if (i==strlen(prologue))
  e6:	e5 e0       	ldi	r30, 0x05	; 5
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	01 90       	ld	r0, Z+
  ec:	00 20       	and	r0, r0
  ee:	e9 f7       	brne	.-6      	; 0xea <__vector_19+0x44>
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	e5 50       	subi	r30, 0x05	; 5
  f4:	f1 40       	sbci	r31, 0x01	; 1
  f6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <i>
  fa:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <i+0x1>
  fe:	e8 17       	cp	r30, r24
 100:	f9 07       	cpc	r31, r25
 102:	31 f4       	brne	.+12     	; 0x110 <__vector_19+0x6a>
		{
			start=false;
 104:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <start>
			i=0;
 108:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <i+0x1>
 10c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <i>
		}
	}
	if (output_enable==1)
 110:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <output_enable>
 114:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <output_enable+0x1>
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	41 f5       	brne	.+80     	; 0x16c <__vector_19+0xc6>
	{
		UDR0=r[j++];
 11c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <j>
 120:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <j+0x1>
 124:	9c 01       	movw	r18, r24
 126:	2f 5f       	subi	r18, 0xFF	; 255
 128:	3f 4f       	sbci	r19, 0xFF	; 255
 12a:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <j+0x1>
 12e:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <j>
 132:	fc 01       	movw	r30, r24
 134:	e0 50       	subi	r30, 0x00	; 0
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	80 81       	ld	r24, Z
 13a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		if (j==strlen(r))
 13e:	e0 e0       	ldi	r30, 0x00	; 0
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	01 90       	ld	r0, Z+
 144:	00 20       	and	r0, r0
 146:	e9 f7       	brne	.-6      	; 0x142 <__vector_19+0x9c>
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	f1 40       	sbci	r31, 0x01	; 1
 14e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <j>
 152:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <j+0x1>
 156:	e8 17       	cp	r30, r24
 158:	f9 07       	cpc	r31, r25
 15a:	41 f4       	brne	.+16     	; 0x16c <__vector_19+0xc6>
		{
			j=0;
 15c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <j+0x1>
 160:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <j>
			output_enable=0;
 164:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <output_enable+0x1>
 168:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <output_enable>
		}
	}
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_18>:
ISR(USART_RX_vect){
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
	count+=1;
 194:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 198:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 1a2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	if (count==1)
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	91 05       	cpc	r25, r1
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <__vector_18+0x34>
	{
		a=UDR0;
 1ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1b0:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <a>
 1b4:	2a c0       	rjmp	.+84     	; 0x20a <__vector_18+0x88>
	}
	else if ((count==2)&(a=='H'))
 1b6:	31 e0       	ldi	r19, 0x01	; 1
 1b8:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <a>
 1bc:	28 34       	cpi	r18, 0x48	; 72
 1be:	09 f0       	breq	.+2      	; 0x1c2 <__vector_18+0x40>
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	02 97       	sbiw	r24, 0x02	; 2
 1c6:	09 f0       	breq	.+2      	; 0x1ca <__vector_18+0x48>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	23 23       	and	r18, r19
 1cc:	d1 f0       	breq	.+52     	; 0x202 <__vector_18+0x80>
	{
		b=UDR0;
 1ce:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1d2:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <b>
		if ((a=='H')&(b=='i'))
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	89 36       	cpi	r24, 0x69	; 105
 1da:	09 f0       	breq	.+2      	; 0x1de <__vector_18+0x5c>
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	39 23       	and	r19, r25
 1e0:	39 f0       	breq	.+14     	; 0x1f0 <__vector_18+0x6e>
		{
			output_enable=1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <output_enable+0x1>
 1ea:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <output_enable>
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <__vector_18+0x88>
			//UDR0='T';
		}
		else{
			count=1;
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__data_end+0x1>
 1f8:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__data_end>
			a=b;
 1fc:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <a>
 200:	04 c0       	rjmp	.+8      	; 0x20a <__vector_18+0x88>
		}
	}
	else{
		count=0;
 202:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 206:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
	}
}
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <main>:

int main(void)
{
    UBRR0 = X;
 21c:	8f ec       	ldi	r24, 0xCF	; 207
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 224:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    //transmit and receive enable
    UCSR0B = (1 << TXEN0)| (1 << RXEN0) | (1 << RXCIE0) | (1<<UDRIE0);//(1 << TXCIE0) debugde了快两个小时，愣是不知道哪里出了问题，最后试着把这个删掉，就成了 
 228:	88 eb       	ldi	r24, 0xB8	; 184
 22a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    sei();
 234:	78 94       	sei
 236:	ff cf       	rjmp	.-2      	; 0x236 <main+0x1a>

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
