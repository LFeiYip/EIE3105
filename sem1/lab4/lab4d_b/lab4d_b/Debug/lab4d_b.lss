
lab4d_b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000198  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  00000232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077f  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065c  00000000  00000000  00000a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000269  00000000  00000000  000010af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001318  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037c  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ad  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000017a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  9e:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_19>:
int start=1;
int count=0;

//data register empty interrupt
//if empty, write to UDR
ISR(USART_UDRE_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	UDR0=T;
  b2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <T>
  b6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	//UCSR0B &= ~(1 << UDRIE0);
}
  ba:	8f 91       	pop	r24
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <__vector_18>:

//receive complete interrupt
ISR(USART_RX_vect){
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	count++;
  d4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
  d8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
  e2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	R=UDR0;
  e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  ea:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <R>
}
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <main>:

int main(void){
	UBRR0 = X;
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 104:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//transmit and receive enable
	UCSR0B = (1 << TXEN0)| (1 << TXCIE0) | (1 << RXEN0) | (1 << RXCIE0) | (1<<UDRIE0);
 108:	88 ef       	ldi	r24, 0xF8	; 248
 10a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	sei();
 114:	78 94       	sei

	while (1){

		//while (( UCSR0A & (1<<RXC0))  == 0){};
		//count++;
		if (count==1)
 116:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 11a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 11e:	21 30       	cpi	r18, 0x01	; 1
 120:	31 05       	cpc	r19, r1
 122:	29 f4       	brne	.+10     	; 0x12e <main+0x32>
		{
			a=R;
 124:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <R>
 128:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <a>
 12c:	f4 cf       	rjmp	.-24     	; 0x116 <main+0x1a>
		}
		else if ((count==2)&(a=='H'))
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <a>
 134:	88 34       	cpi	r24, 0x48	; 72
 136:	09 f0       	breq	.+2      	; 0x13a <main+0x3e>
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	22 30       	cpi	r18, 0x02	; 2
 13e:	31 05       	cpc	r19, r1
 140:	09 f0       	breq	.+2      	; 0x144 <main+0x48>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	89 23       	and	r24, r25
 146:	09 f1       	breq	.+66     	; 0x18a <main+0x8e>
		{
			b=R;
 148:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <R>
 14c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <b>
			if ((a=='H')&(b=='i'))
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	89 36       	cpi	r24, 0x69	; 105
 154:	09 f0       	breq	.+2      	; 0x158 <main+0x5c>
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	92 23       	and	r25, r18
 15a:	49 f4       	brne	.+18     	; 0x16e <main+0x72>
 15c:	dc cf       	rjmp	.-72     	; 0x116 <main+0x1a>
			{
				for (int i = 0; i < strlen(r); i++){
					//while (( UCSR0A & (1<<UDRE0))  == 0){};
					T = r[i];
 15e:	fc 01       	movw	r30, r24
 160:	e0 50       	subi	r30, 0x00	; 0
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	20 81       	ld	r18, Z
 166:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <T>
		else if ((count==2)&(a=='H'))
		{
			b=R;
			if ((a=='H')&(b=='i'))
			{
				for (int i = 0; i < strlen(r); i++){
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	02 c0       	rjmp	.+4      	; 0x172 <main+0x76>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	e0 e0       	ldi	r30, 0x00	; 0
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	01 90       	ld	r0, Z+
 178:	00 20       	and	r0, r0
 17a:	e9 f7       	brne	.-6      	; 0x176 <main+0x7a>
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	e0 50       	subi	r30, 0x00	; 0
 180:	f1 40       	sbci	r31, 0x01	; 1
 182:	8e 17       	cp	r24, r30
 184:	9f 07       	cpc	r25, r31
 186:	58 f3       	brcs	.-42     	; 0x15e <main+0x62>
 188:	c6 cf       	rjmp	.-116    	; 0x116 <main+0x1a>
					T = r[i];
				}
			}
		}
		else{
			count=0;
 18a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__data_end+0x1>
 18e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 192:	c1 cf       	rjmp	.-126    	; 0x116 <main+0x1a>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
