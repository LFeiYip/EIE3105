
lab3b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007c7  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000693  00000000  00000000  00000b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f4  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b3  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000131  00000000  00000000  00001a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001bb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  88:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timer2_CTCModeDelay100ms>:

int count=0;
int count2=0;

void timer2_CTCModeDelay100ms(){
	OCR2A=199;
  90:	87 ec       	ldi	r24, 0xC7	; 199
  92:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A=0x02;
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B=0x01;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	//for every 1/10 second, 1.6M/200=8000=800x10
	for(int a=0;a!=10;++a){
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	0e c0       	rjmp	.+28     	; 0xc4 <timer2_CTCModeDelay100ms+0x34>
		for(int b=0;b!=800;++b){
			while((TIFR2&(1<<1))==0);
  a8:	b9 9b       	sbis	0x17, 1	; 23
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <timer2_CTCModeDelay100ms+0x18>
			TIFR2=(1<<OCF2A);
  ac:	22 e0       	ldi	r18, 0x02	; 2
  ae:	27 bb       	out	0x17, r18	; 23
	OCR2A=199;
	TCCR2A=0x02;
	TCCR2B=0x01;
	//for every 1/10 second, 1.6M/200=8000=800x10
	for(int a=0;a!=10;++a){
		for(int b=0;b!=800;++b){
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <timer2_CTCModeDelay100ms+0x28>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	80 32       	cpi	r24, 0x20	; 32
  ba:	23 e0       	ldi	r18, 0x03	; 3
  bc:	92 07       	cpc	r25, r18
  be:	a1 f7       	brne	.-24     	; 0xa8 <timer2_CTCModeDelay100ms+0x18>
void timer2_CTCModeDelay100ms(){
	OCR2A=199;
	TCCR2A=0x02;
	TCCR2B=0x01;
	//for every 1/10 second, 1.6M/200=8000=800x10
	for(int a=0;a!=10;++a){
  c0:	4f 5f       	subi	r20, 0xFF	; 255
  c2:	5f 4f       	sbci	r21, 0xFF	; 255
  c4:	4a 30       	cpi	r20, 0x0A	; 10
  c6:	51 05       	cpc	r21, r1
  c8:	a9 f7       	brne	.-22     	; 0xb4 <timer2_CTCModeDelay100ms+0x24>
		for(int b=0;b!=800;++b){
			while((TIFR2&(1<<1))==0);
			TIFR2=(1<<OCF2A);
		}
	}
	TCCR2B = 0;
  ca:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  ce:	08 95       	ret

000000d0 <PORTC_blinking>:
}

void PORTC_blinking(){
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
	PORTC=(PORTC&(1<<0))|(1<<4);
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	81 70       	andi	r24, 0x01	; 1
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	88 b9       	out	0x08, r24	; 8
	for(int i=0;i!=10;++i){
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <PORTC_blinking+0x20>
		timer2_CTCModeDelay100ms();
  e2:	0e 94 48 00 	call	0x90	; 0x90 <timer2_CTCModeDelay100ms>
		//PORTC^=(1<<4);
		PORTC^=(1<<4);
  e6:	98 b1       	in	r25, 0x08	; 8
  e8:	80 e1       	ldi	r24, 0x10	; 16
  ea:	89 27       	eor	r24, r25
  ec:	88 b9       	out	0x08, r24	; 8
	TCCR2B = 0;
}

void PORTC_blinking(){
	PORTC=(PORTC&(1<<0))|(1<<4);
	for(int i=0;i!=10;++i){
  ee:	21 96       	adiw	r28, 0x01	; 1
  f0:	ca 30       	cpi	r28, 0x0A	; 10
  f2:	d1 05       	cpc	r29, r1
  f4:	b1 f7       	brne	.-20     	; 0xe2 <PORTC_blinking+0x12>
		timer2_CTCModeDelay100ms();
		//PORTC^=(1<<4);
		PORTC^=(1<<4);
	}
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <set_timer1>:

void set_timer1(){
	OCR1A=0xF424;
  fc:	84 e2       	ldi	r24, 0x24	; 36
  fe:	94 ef       	ldi	r25, 0xF4	; 244
 100:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 104:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B=0x0C;//timer 1 CTC mode with prescaler 256, trigger interrupt every 1s
 108:	8c e0       	ldi	r24, 0x0C	; 12
 10a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1=(1<<OCIE1A);
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 114:	08 95       	ret

00000116 <setup>:
}


void setup(){
	DDRD=0xFF;
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	9a b9       	out	0x0a, r25	; 10
	DDRB|=0x3F;
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	8f 63       	ori	r24, 0x3F	; 63
 11e:	84 b9       	out	0x04, r24	; 4
	DDRC|=0xFF;//0x04
 120:	87 b1       	in	r24, 0x07	; 7
 122:	97 b9       	out	0x07, r25	; 7
	set_timer1();
 124:	0e 94 7e 00 	call	0xfc	; 0xfc <set_timer1>
	EIMSK=(1<<0);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	8d bb       	out	0x1d, r24	; 29
	EICRA=(1<<1);
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 132:	08 95       	ret

00000134 <traffic_light>:
}

void traffic_light(){
	//state1
	while(count<5){
 134:	06 c0       	rjmp	.+12     	; 0x142 <traffic_light+0xe>
		//time duration=5s
		PORTB=0x0C;//light2(green) light3(red)0c
 136:	8c e0       	ldi	r24, 0x0C	; 12
 138:	85 b9       	out	0x05, r24	; 5
		PORTC= (PORTC&(1<<0))|(1<<5);//light1(red)
 13a:	88 b1       	in	r24, 0x08	; 8
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	88 b9       	out	0x08, r24	; 8
	EICRA=(1<<1);
}

void traffic_light(){
	//state1
	while(count<5){
 142:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 146:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 14a:	85 30       	cpi	r24, 0x05	; 5
 14c:	91 05       	cpc	r25, r1
 14e:	9c f3       	brlt	.-26     	; 0x136 <traffic_light+0x2>
		PORTB=0x0C;//light2(green) light3(red)0c
		PORTC= (PORTC&(1<<0))|(1<<5);//light1(red)
	}
	
	//state2
	if(count==5){
 150:	05 97       	sbiw	r24, 0x05	; 5
 152:	31 f4       	brne	.+12     	; 0x160 <traffic_light+0x2c>
		//from count=5 to count=6, time duration=1s
		PORTB=0x14;
 154:	84 e1       	ldi	r24, 0x14	; 20
 156:	85 b9       	out	0x05, r24	; 5
		PORTC=(PORTC&(1<<0))|(1<<5);
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	81 70       	andi	r24, 0x01	; 1
 15c:	80 62       	ori	r24, 0x20	; 32
 15e:	88 b9       	out	0x08, r24	; 8
	}
	
	//state3
	if(count==6){
 160:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 164:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 168:	06 97       	sbiw	r24, 0x06	; 6
 16a:	31 f4       	brne	.+12     	; 0x178 <traffic_light+0x44>
		//from count= to count=7, time duration=1s
		PORTB=0x24;
 16c:	84 e2       	ldi	r24, 0x24	; 36
 16e:	85 b9       	out	0x05, r24	; 5
		PORTC=(PORTC&(1<<0))|(1<<5);
 170:	88 b1       	in	r24, 0x08	; 8
 172:	81 70       	andi	r24, 0x01	; 1
 174:	80 62       	ori	r24, 0x20	; 32
 176:	88 b9       	out	0x08, r24	; 8
	}
	
	//state4
	if(count==7){
 178:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 17c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 180:	07 97       	sbiw	r24, 0x07	; 7
 182:	69 f4       	brne	.+26     	; 0x19e <traffic_light+0x6a>
		//from count=7 to count=8, time duration=1s
		PORTB=0x26;
 184:	86 e2       	ldi	r24, 0x26	; 38
 186:	85 b9       	out	0x05, r24	; 5
		PORTC=(PORTC&(1<<0))|(1<<5);
 188:	88 b1       	in	r24, 0x08	; 8
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	88 b9       	out	0x08, r24	; 8
 190:	06 c0       	rjmp	.+12     	; 0x19e <traffic_light+0x6a>
	}
	
	//state5
	while((count==8)&(count<13)){
		//from count=8 to count=13, time duration=5s
		PORTB=0x21;
 192:	81 e2       	ldi	r24, 0x21	; 33
 194:	85 b9       	out	0x05, r24	; 5
		PORTC=(PORTC&(1<<0))|(1<<4);
 196:	88 b1       	in	r24, 0x08	; 8
 198:	81 70       	andi	r24, 0x01	; 1
 19a:	80 61       	ori	r24, 0x10	; 16
 19c:	88 b9       	out	0x08, r24	; 8
		PORTB=0x26;
		PORTC=(PORTC&(1<<0))|(1<<5);
	}
	
	//state5
	while((count==8)&(count<13)){
 19e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 1a2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	91 05       	cpc	r25, r1
 1aa:	99 f3       	breq	.-26     	; 0x192 <traffic_light+0x5e>
		PORTB=0x21;
		PORTC=(PORTC&(1<<0))|(1<<4);
	}
	
	//state6
	if(count==13){
 1ac:	0d 97       	sbiw	r24, 0x0d	; 13
 1ae:	21 f4       	brne	.+8      	; 0x1b8 <traffic_light+0x84>
		//from count=13 to count=14, time duration=1s
		PORTB=0x22;
 1b0:	82 e2       	ldi	r24, 0x22	; 34
 1b2:	85 b9       	out	0x05, r24	; 5
		PORTC_blinking();
 1b4:	0e 94 68 00 	call	0xd0	; 0xd0 <PORTC_blinking>
		//1 second delay has already done in function 'PORTC_blinking()'
	}
	
	
	//state7
	if(count== 14){
 1b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 1bc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 1c0:	0e 97       	sbiw	r24, 0x0e	; 14
 1c2:	69 f4       	brne	.+26     	; 0x1de <traffic_light+0xaa>
		//from count=14 to count=15, time duration=1s
		PORTB=0x24;
 1c4:	84 e2       	ldi	r24, 0x24	; 36
 1c6:	85 b9       	out	0x05, r24	; 5
		//PORTC=(1<<5)|a;
		PORTC=(PORTC&(1<<0))^(1<<5);
 1c8:	88 b1       	in	r24, 0x08	; 8
 1ca:	81 70       	andi	r24, 0x01	; 1
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	88 b9       	out	0x08, r24	; 8
 1d0:	06 c0       	rjmp	.+12     	; 0x1de <traffic_light+0xaa>
	}
	
	//state8
	while((count==15)&(count<16)){
		//from count=15 to count=16, time duration=1s
		PORTB=0x34;
 1d2:	84 e3       	ldi	r24, 0x34	; 52
 1d4:	85 b9       	out	0x05, r24	; 5
		PORTC=(PORTC&(1<<0))^(1<<5);
 1d6:	88 b1       	in	r24, 0x08	; 8
 1d8:	81 70       	andi	r24, 0x01	; 1
 1da:	80 62       	ori	r24, 0x20	; 32
 1dc:	88 b9       	out	0x08, r24	; 8
		//PORTC=(1<<5)|a;
		PORTC=(PORTC&(1<<0))^(1<<5);
	}
	
	//state8
	while((count==15)&(count<16)){
 1de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 1e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 1e6:	8f 30       	cpi	r24, 0x0F	; 15
 1e8:	91 05       	cpc	r25, r1
 1ea:	99 f3       	breq	.-26     	; 0x1d2 <traffic_light+0x9e>
		//from count=15 to count=16, time duration=1s
		PORTB=0x34;
		PORTC=(PORTC&(1<<0))^(1<<5);
	}
	
	if(count==16){
 1ec:	40 97       	sbiw	r24, 0x10	; 16
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <traffic_light+0xc4>
		//reset count to 0
		count=0;
 1f0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count+0x1>
 1f4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count>
 1f8:	08 95       	ret

000001fa <__vector_11>:
	}
}

ISR(TIMER1_COMPA_vect){
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
	count++;
 208:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 20c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
 216:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
}
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_1>:

ISR(INT0_vect){
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
	count2++;
 236:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 244:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(count2==3){
 248:	03 97       	sbiw	r24, 0x03	; 3
 24a:	41 f4       	brne	.+16     	; 0x25c <__vector_1+0x34>
		PORTC^=(1<<0);
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	89 27       	eor	r24, r25
 252:	88 b9       	out	0x08, r24	; 8
		count2=0;
 254:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 258:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <main>:

int main(void)
{
	setup();
 26a:	0e 94 8b 00 	call	0x116	; 0x116 <setup>
	sei();
 26e:	78 94       	sei
	while (1)
	{
		traffic_light();
 270:	0e 94 9a 00 	call	0x134	; 0x134 <traffic_light>
 274:	fd cf       	rjmp	.-6      	; 0x270 <main+0x6>

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
