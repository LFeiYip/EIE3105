
lab3b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000027c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000857  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e0  00000000  00000000  00000b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000456  00000000  00000000  0000126b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000016c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038b  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000184  00000000  00000000  00001ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00001c67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  88:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <CTCModeDelay>:
#include <avr/io.h>
#include <avr/interrupt.h>

int count=0;

void CTCModeDelay(int x){
  90:	fc 01       	movw	r30, r24
	OCR0A=199;
  92:	97 ec       	ldi	r25, 0xC7	; 199
  94:	97 bd       	out	0x27, r25	; 39
	TCCR0A=0x02;
  96:	92 e0       	ldi	r25, 0x02	; 2
  98:	94 bd       	out	0x24, r25	; 36
	TCCR0B=0x01;
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	95 bd       	out	0x25, r25	; 37
	//for every second, 16M/200=80000=800x100
	for(int c=0;c!=x;++c){
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	17 c0       	rjmp	.+46     	; 0xd2 <CTCModeDelay+0x42>
		for(int a=0;a!=100;++a){
			for(int b=0;b!=800;++b){
				while((TIFR0&(1<<1))==0);
  a4:	a9 9b       	sbis	0x15, 1	; 21
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <CTCModeDelay+0x14>
				TIFR0=(1<<OCF0A);
  a8:	92 e0       	ldi	r25, 0x02	; 2
  aa:	95 bb       	out	0x15, r25	; 21
	TCCR0A=0x02;
	TCCR0B=0x01;
	//for every second, 16M/200=80000=800x100
	for(int c=0;c!=x;++c){
		for(int a=0;a!=100;++a){
			for(int b=0;b!=800;++b){
  ac:	2f 5f       	subi	r18, 0xFF	; 255
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <CTCModeDelay+0x26>
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	20 32       	cpi	r18, 0x20	; 32
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	38 07       	cpc	r19, r24
  bc:	99 f7       	brne	.-26     	; 0xa4 <CTCModeDelay+0x14>
	OCR0A=199;
	TCCR0A=0x02;
	TCCR0B=0x01;
	//for every second, 16M/200=80000=800x100
	for(int c=0;c!=x;++c){
		for(int a=0;a!=100;++a){
  be:	6f 5f       	subi	r22, 0xFF	; 255
  c0:	7f 4f       	sbci	r23, 0xFF	; 255
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <CTCModeDelay+0x38>
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	64 36       	cpi	r22, 0x64	; 100
  ca:	71 05       	cpc	r23, r1
  cc:	91 f7       	brne	.-28     	; 0xb2 <CTCModeDelay+0x22>
void CTCModeDelay(int x){
	OCR0A=199;
	TCCR0A=0x02;
	TCCR0B=0x01;
	//for every second, 16M/200=80000=800x100
	for(int c=0;c!=x;++c){
  ce:	4f 5f       	subi	r20, 0xFF	; 255
  d0:	5f 4f       	sbci	r21, 0xFF	; 255
  d2:	4e 17       	cp	r20, r30
  d4:	5f 07       	cpc	r21, r31
  d6:	b1 f7       	brne	.-20     	; 0xc4 <CTCModeDelay+0x34>
				while((TIFR0&(1<<1))==0);
				TIFR0=(1<<OCF0A);
			}
		}
	}
	TCCR0B = 0;
  d8:	15 bc       	out	0x25, r1	; 37
  da:	08 95       	ret

000000dc <CTCModeDelay100ms>:
}

void CTCModeDelay100ms(){
	OCR0A=199;
  dc:	87 ec       	ldi	r24, 0xC7	; 199
  de:	87 bd       	out	0x27, r24	; 39
	TCCR0A=0x02;
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	84 bd       	out	0x24, r24	; 36
	TCCR0B=0x01;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	85 bd       	out	0x25, r24	; 37
	//for every 1/10 second, 1.6M/200=8000=800x10
	for(int a=0;a!=10;++a){
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	0e c0       	rjmp	.+28     	; 0x10a <CTCModeDelay100ms+0x2e>
		for(int b=0;b!=800;++b){
			while((TIFR0&(1<<1))==0);
  ee:	a9 9b       	sbis	0x15, 1	; 21
  f0:	fe cf       	rjmp	.-4      	; 0xee <CTCModeDelay100ms+0x12>
			TIFR0=(1<<OCF0A);
  f2:	22 e0       	ldi	r18, 0x02	; 2
  f4:	25 bb       	out	0x15, r18	; 21
	OCR0A=199;
	TCCR0A=0x02;
	TCCR0B=0x01;
	//for every 1/10 second, 1.6M/200=8000=800x10
	for(int a=0;a!=10;++a){
		for(int b=0;b!=800;++b){
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	02 c0       	rjmp	.+4      	; 0xfe <CTCModeDelay100ms+0x22>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	80 32       	cpi	r24, 0x20	; 32
 100:	23 e0       	ldi	r18, 0x03	; 3
 102:	92 07       	cpc	r25, r18
 104:	a1 f7       	brne	.-24     	; 0xee <CTCModeDelay100ms+0x12>
void CTCModeDelay100ms(){
	OCR0A=199;
	TCCR0A=0x02;
	TCCR0B=0x01;
	//for every 1/10 second, 1.6M/200=8000=800x10
	for(int a=0;a!=10;++a){
 106:	4f 5f       	subi	r20, 0xFF	; 255
 108:	5f 4f       	sbci	r21, 0xFF	; 255
 10a:	4a 30       	cpi	r20, 0x0A	; 10
 10c:	51 05       	cpc	r21, r1
 10e:	a9 f7       	brne	.-22     	; 0xfa <CTCModeDelay100ms+0x1e>
		for(int b=0;b!=800;++b){
			while((TIFR0&(1<<1))==0);
			TIFR0=(1<<OCF0A);
		}
	}
	TCCR0B = 0;
 110:	15 bc       	out	0x25, r1	; 37
 112:	08 95       	ret

00000114 <PORTC_blinking>:
}

void PORTC_blinking(){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
	PORTC=0x01;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	88 b9       	out	0x08, r24	; 8
	for(int i=0;i!=10;++i){
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	07 c0       	rjmp	.+14     	; 0x130 <PORTC_blinking+0x1c>
		CTCModeDelay100ms();
 122:	0e 94 6e 00 	call	0xdc	; 0xdc <CTCModeDelay100ms>
		PORTC^=(1<<0);
 126:	98 b1       	in	r25, 0x08	; 8
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	89 27       	eor	r24, r25
 12c:	88 b9       	out	0x08, r24	; 8
	TCCR0B = 0;
}

void PORTC_blinking(){
	PORTC=0x01;
	for(int i=0;i!=10;++i){
 12e:	21 96       	adiw	r28, 0x01	; 1
 130:	ca 30       	cpi	r28, 0x0A	; 10
 132:	d1 05       	cpc	r29, r1
 134:	b1 f7       	brne	.-20     	; 0x122 <PORTC_blinking+0xe>
		CTCModeDelay100ms();
		PORTC^=(1<<0);
	}
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <set_interrupt_INT0>:

void set_interrupt_INT0(){
	EIMSK=0;//INT0,signal from PD2
 13c:	1d ba       	out	0x1d, r1	; 29
	EICRA=0x01;//setup ISC0, logical change will trigger interrupt
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 144:	08 95       	ret

00000146 <__vector_1>:

//ISR(TIMER1_COMPA_vect){
	//PORTC^=(1<<2);
//}

ISR(INT0_vect){
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
	++count;
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(count==3){
 166:	03 97       	sbiw	r24, 0x03	; 3
 168:	41 f4       	brne	.+16     	; 0x17a <__vector_1+0x34>
		PORTC^=(1<<5);
 16a:	98 b1       	in	r25, 0x08	; 8
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	89 27       	eor	r24, r25
 170:	88 b9       	out	0x08, r24	; 8
		count=0;
 172:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 176:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRB=0x3F;
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	84 b9       	out	0x04, r24	; 4
	DDRC=0xFF;//0x04
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	87 b9       	out	0x07, r24	; 7
	//set_interrupt_timer0compare();
	set_interrupt_INT0();
 190:	0e 94 9e 00 	call	0x13c	; 0x13c <set_interrupt_INT0>
	sei();
 194:	78 94       	sei
	
    while (1) {
		//1
		PORTC=0x02;//light1(red)
 196:	c2 e0       	ldi	r28, 0x02	; 2
 198:	c8 b9       	out	0x08, r28	; 8
		PORTB=0x0C;//light2(green) light3(red)0c
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	85 b9       	out	0x05, r24	; 5
		CTCModeDelay(5);
 19e:	85 e0       	ldi	r24, 0x05	; 5
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 48 00 	call	0x90	; 0x90 <CTCModeDelay>
		
		//2
		PORTC=0x02;
 1a6:	c8 b9       	out	0x08, r28	; 8
		PORTB=0x14;
 1a8:	84 e1       	ldi	r24, 0x14	; 20
 1aa:	85 b9       	out	0x05, r24	; 5
		CTCModeDelay(1);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 48 00 	call	0x90	; 0x90 <CTCModeDelay>
		
		//3
		PORTC=0x02;
 1b4:	c8 b9       	out	0x08, r28	; 8
		PORTB=0x24;
 1b6:	d4 e2       	ldi	r29, 0x24	; 36
 1b8:	d5 b9       	out	0x05, r29	; 5
		CTCModeDelay(1);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 48 00 	call	0x90	; 0x90 <CTCModeDelay>
		
		//4
		PORTC=0x02;
 1c2:	c8 b9       	out	0x08, r28	; 8
		PORTB=0x26;
 1c4:	86 e2       	ldi	r24, 0x26	; 38
 1c6:	85 b9       	out	0x05, r24	; 5
		CTCModeDelay(1);
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 48 00 	call	0x90	; 0x90 <CTCModeDelay>
		
		//5
		PORTB=0x21;
 1d0:	81 e2       	ldi	r24, 0x21	; 33
 1d2:	85 b9       	out	0x05, r24	; 5
		PORTC=0x01;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	88 b9       	out	0x08, r24	; 8
		CTCModeDelay(5);
 1d8:	85 e0       	ldi	r24, 0x05	; 5
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 48 00 	call	0x90	; 0x90 <CTCModeDelay>
		
		//6
		PORTB=0x22;
 1e0:	82 e2       	ldi	r24, 0x22	; 34
 1e2:	85 b9       	out	0x05, r24	; 5
		PORTC_blinking();
 1e4:	0e 94 8a 00 	call	0x114	; 0x114 <PORTC_blinking>
		//1 second delay has already done in function 'PORTC_blinking()'
		
		//7
		PORTB=0x24;
 1e8:	d5 b9       	out	0x05, r29	; 5
		PORTC=0x02;
 1ea:	c8 b9       	out	0x08, r28	; 8
		CTCModeDelay(1);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 48 00 	call	0x90	; 0x90 <CTCModeDelay>
		
		//8
		PORTB=0x34;
 1f4:	84 e3       	ldi	r24, 0x34	; 52
 1f6:	85 b9       	out	0x05, r24	; 5
		PORTC=0x02;
 1f8:	c8 b9       	out	0x08, r28	; 8
		CTCModeDelay(1);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 48 00 	call	0x90	; 0x90 <CTCModeDelay>
 202:	c9 cf       	rjmp	.-110    	; 0x196 <main+0xe>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
