
lab3c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000354  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000003c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d0  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000693  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ae  00000000  00000000  000012f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b1  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013e  00000000  00000000  00001c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001d63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 88 01 	jmp	0x310	; 0x310 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a2 01 	call	0x344	; 0x344 <main>
  88:	0c 94 a8 01 	jmp	0x350	; 0x350 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timer2_CTCModeDelay100ms>:

int count=0;
int state=0;

void timer2_CTCModeDelay100ms(){
	OCR2A=199;
  90:	87 ec       	ldi	r24, 0xC7	; 199
  92:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TCCR2A=0x02;
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B=0x01;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	//for every 1/10 second, 1.6M/200=8000=800x10
	for(int a=0;a!=10;++a){
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	0e c0       	rjmp	.+28     	; 0xc4 <timer2_CTCModeDelay100ms+0x34>
		for(int b=0;b!=800;++b){
			while((TIFR2&(1<<1))==0);
  a8:	b9 9b       	sbis	0x17, 1	; 23
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <timer2_CTCModeDelay100ms+0x18>
			TIFR2=(1<<OCF2A);
  ac:	22 e0       	ldi	r18, 0x02	; 2
  ae:	27 bb       	out	0x17, r18	; 23
	OCR2A=199;
	TCCR2A=0x02;
	TCCR2B=0x01;
	//for every 1/10 second, 1.6M/200=8000=800x10
	for(int a=0;a!=10;++a){
		for(int b=0;b!=800;++b){
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <timer2_CTCModeDelay100ms+0x28>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	80 32       	cpi	r24, 0x20	; 32
  ba:	23 e0       	ldi	r18, 0x03	; 3
  bc:	92 07       	cpc	r25, r18
  be:	a1 f7       	brne	.-24     	; 0xa8 <timer2_CTCModeDelay100ms+0x18>
void timer2_CTCModeDelay100ms(){
	OCR2A=199;
	TCCR2A=0x02;
	TCCR2B=0x01;
	//for every 1/10 second, 1.6M/200=8000=800x10
	for(int a=0;a!=10;++a){
  c0:	4f 5f       	subi	r20, 0xFF	; 255
  c2:	5f 4f       	sbci	r21, 0xFF	; 255
  c4:	4a 30       	cpi	r20, 0x0A	; 10
  c6:	51 05       	cpc	r21, r1
  c8:	a9 f7       	brne	.-22     	; 0xb4 <timer2_CTCModeDelay100ms+0x24>
		for(int b=0;b!=800;++b){
			while((TIFR2&(1<<1))==0);
			TIFR2=(1<<OCF2A);
		}
	}
	TCCR2B = 0;
  ca:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  ce:	08 95       	ret

000000d0 <PORTC_blinking>:
}

void PORTC_blinking(){
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
	PORTC=(PORTC&(1<<0))|(1<<4);
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	81 70       	andi	r24, 0x01	; 1
  d8:	80 61       	ori	r24, 0x10	; 16
  da:	88 b9       	out	0x08, r24	; 8
	for(int i=0;i!=10;++i){
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <PORTC_blinking+0x20>
		timer2_CTCModeDelay100ms();
  e2:	0e 94 48 00 	call	0x90	; 0x90 <timer2_CTCModeDelay100ms>
		//PORTC^=(1<<4);
		PORTC^=(1<<4);
  e6:	98 b1       	in	r25, 0x08	; 8
  e8:	80 e1       	ldi	r24, 0x10	; 16
  ea:	89 27       	eor	r24, r25
  ec:	88 b9       	out	0x08, r24	; 8
	TCCR2B = 0;
}

void PORTC_blinking(){
	PORTC=(PORTC&(1<<0))|(1<<4);
	for(int i=0;i!=10;++i){
  ee:	21 96       	adiw	r28, 0x01	; 1
  f0:	ca 30       	cpi	r28, 0x0A	; 10
  f2:	d1 05       	cpc	r29, r1
  f4:	b1 f7       	brne	.-20     	; 0xe2 <PORTC_blinking+0x12>
		timer2_CTCModeDelay100ms();
		//PORTC^=(1<<4);
		PORTC^=(1<<4);
	}
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <set_timer1>:

void set_timer1(){
	OCR1A=0xF424;
  fc:	84 e2       	ldi	r24, 0x24	; 36
  fe:	94 ef       	ldi	r25, 0xF4	; 244
 100:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 104:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B=0x0C;//timer 1 CTC mode with prescaler 256, trigger interrupt every 1s
 108:	8c e0       	ldi	r24, 0x0C	; 12
 10a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1=(1<<OCIE1A);
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 114:	08 95       	ret

00000116 <setup>:
}


void setup(){
	DDRD=0xFF;
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	9a b9       	out	0x0a, r25	; 10
	DDRB|=0x3F;
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	8f 63       	ori	r24, 0x3F	; 63
 11e:	84 b9       	out	0x04, r24	; 4
	DDRC|=0xFF;//0x04
 120:	87 b1       	in	r24, 0x07	; 7
 122:	97 b9       	out	0x07, r25	; 7
	set_timer1();
 124:	0e 94 7e 00 	call	0xfc	; 0xfc <set_timer1>
	EIMSK=(1<<1);//enable INT1;
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	8d bb       	out	0x1d, r24	; 29
	EICRA=0x08;;
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 132:	08 95       	ret

00000134 <traffic_light>:
}

void traffic_light(){
	//state1
	while(count<5){
 134:	14 c0       	rjmp	.+40     	; 0x15e <traffic_light+0x2a>
		//time duration=5s
		if (state==1)
 136:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 13a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	31 f4       	brne	.+12     	; 0x14e <traffic_light+0x1a>
		{
			PORTB=0x0C;//light2(green) light3(red)0c
 142:	8c e0       	ldi	r24, 0x0C	; 12
 144:	85 b9       	out	0x05, r24	; 5
			PORTC= (PORTC&(1<<0))|(1<<5);//light1(red)
 146:	88 b1       	in	r24, 0x08	; 8
 148:	81 70       	andi	r24, 0x01	; 1
 14a:	80 62       	ori	r24, 0x20	; 32
 14c:	88 b9       	out	0x08, r24	; 8
		}
		
		if(state==0){
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 156:	89 2b       	or	r24, r25
 158:	11 f4       	brne	.+4      	; 0x15e <traffic_light+0x2a>
			PORTB=0;
 15a:	15 b8       	out	0x05, r1	; 5
			PORTC=0;
 15c:	18 b8       	out	0x08, r1	; 8
	EICRA=0x08;;
}

void traffic_light(){
	//state1
	while(count<5){
 15e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 162:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 166:	85 30       	cpi	r24, 0x05	; 5
 168:	91 05       	cpc	r25, r1
 16a:	2c f3       	brlt	.-54     	; 0x136 <traffic_light+0x2>
			PORTC=0;
		}
	}
	
	//state2
	if(count==5){
 16c:	05 97       	sbiw	r24, 0x05	; 5
 16e:	a1 f4       	brne	.+40     	; 0x198 <traffic_light+0x64>
		//from count=5 to count=6, time duration=1s
		if (state==1)
 170:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	31 f4       	brne	.+12     	; 0x188 <traffic_light+0x54>
		{
			PORTB=0x14;
 17c:	84 e1       	ldi	r24, 0x14	; 20
 17e:	85 b9       	out	0x05, r24	; 5
			PORTC=(PORTC&(1<<0))|(1<<5);
 180:	88 b1       	in	r24, 0x08	; 8
 182:	81 70       	andi	r24, 0x01	; 1
 184:	80 62       	ori	r24, 0x20	; 32
 186:	88 b9       	out	0x08, r24	; 8
		}
		
		if(state==0){
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 190:	89 2b       	or	r24, r25
 192:	11 f4       	brne	.+4      	; 0x198 <traffic_light+0x64>
			PORTB=0;
 194:	15 b8       	out	0x05, r1	; 5
			PORTC=0;
 196:	18 b8       	out	0x08, r1	; 8
		}
	}
	
	//state3
	if(count==6){
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 19c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 1a0:	06 97       	sbiw	r24, 0x06	; 6
 1a2:	a1 f4       	brne	.+40     	; 0x1cc <traffic_light+0x98>
		//from count= to count=7, time duration=1s
		if (state==1)
 1a4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	31 f4       	brne	.+12     	; 0x1bc <traffic_light+0x88>
		{
			PORTB=0x24;
 1b0:	84 e2       	ldi	r24, 0x24	; 36
 1b2:	85 b9       	out	0x05, r24	; 5
			PORTC=(PORTC&(1<<0))|(1<<5);
 1b4:	88 b1       	in	r24, 0x08	; 8
 1b6:	81 70       	andi	r24, 0x01	; 1
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	88 b9       	out	0x08, r24	; 8
		}
		
		if(state==0){
 1bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c4:	89 2b       	or	r24, r25
 1c6:	11 f4       	brne	.+4      	; 0x1cc <traffic_light+0x98>
			PORTB=0;
 1c8:	15 b8       	out	0x05, r1	; 5
			PORTC=0;
 1ca:	18 b8       	out	0x08, r1	; 8
		}
	}
	
	//state4
	if(count==7){
 1cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 1d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 1d4:	07 97       	sbiw	r24, 0x07	; 7
 1d6:	49 f5       	brne	.+82     	; 0x22a <traffic_light+0xf6>
		//from count=7 to count=8, time duration=1s
		if (state==1)
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	31 f4       	brne	.+12     	; 0x1f0 <traffic_light+0xbc>
		{
			PORTB=0x26;
 1e4:	86 e2       	ldi	r24, 0x26	; 38
 1e6:	85 b9       	out	0x05, r24	; 5
			PORTC=(PORTC&(1<<0))|(1<<5);
 1e8:	88 b1       	in	r24, 0x08	; 8
 1ea:	81 70       	andi	r24, 0x01	; 1
 1ec:	80 62       	ori	r24, 0x20	; 32
 1ee:	88 b9       	out	0x08, r24	; 8
		}
		
		if(state==0){
 1f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	89 2b       	or	r24, r25
 1fa:	b9 f4       	brne	.+46     	; 0x22a <traffic_light+0xf6>
			PORTB=0;
 1fc:	15 b8       	out	0x05, r1	; 5
			PORTC=0;
 1fe:	18 b8       	out	0x08, r1	; 8
 200:	14 c0       	rjmp	.+40     	; 0x22a <traffic_light+0xf6>
	}
	
	//state5
	while((count==8)&(count<13)){
		//from count=8 to count=13, time duration=5s
		if (state==1)
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 206:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	31 f4       	brne	.+12     	; 0x21a <traffic_light+0xe6>
		{
			PORTB=0x21;
 20e:	81 e2       	ldi	r24, 0x21	; 33
 210:	85 b9       	out	0x05, r24	; 5
			PORTC=(PORTC&(1<<0))|(1<<4);
 212:	88 b1       	in	r24, 0x08	; 8
 214:	81 70       	andi	r24, 0x01	; 1
 216:	80 61       	ori	r24, 0x10	; 16
 218:	88 b9       	out	0x08, r24	; 8
		}
		
		
		if(state==0){
 21a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 21e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 222:	89 2b       	or	r24, r25
 224:	11 f4       	brne	.+4      	; 0x22a <traffic_light+0xf6>
			PORTB=0;
 226:	15 b8       	out	0x05, r1	; 5
			PORTC=0;
 228:	18 b8       	out	0x08, r1	; 8
			PORTC=0;
		}
	}
	
	//state5
	while((count==8)&(count<13)){
 22a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 22e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 232:	88 30       	cpi	r24, 0x08	; 8
 234:	91 05       	cpc	r25, r1
 236:	29 f3       	breq	.-54     	; 0x202 <traffic_light+0xce>
			PORTC=0;
		}
	}
	
	//state6
	if(count==13){
 238:	0d 97       	sbiw	r24, 0x0d	; 13
 23a:	b1 f4       	brne	.+44     	; 0x268 <traffic_light+0x134>
		//from count=13 to count=14, time duration=1s
		if (state==1)
 23c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 240:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	21 f4       	brne	.+8      	; 0x250 <traffic_light+0x11c>
		{
			PORTB=0x22;
 248:	82 e2       	ldi	r24, 0x22	; 34
 24a:	85 b9       	out	0x05, r24	; 5
			PORTC_blinking();
 24c:	0e 94 68 00 	call	0xd0	; 0xd0 <PORTC_blinking>
			//1 second delay has already done in function 'PORTC_blinking()'
		}
		PORTB=0x22;
 250:	82 e2       	ldi	r24, 0x22	; 34
 252:	85 b9       	out	0x05, r24	; 5
		PORTC_blinking();
 254:	0e 94 68 00 	call	0xd0	; 0xd0 <PORTC_blinking>
		//1 second delay has already done in function 'PORTC_blinking()'
		if(state==0){
 258:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 260:	89 2b       	or	r24, r25
 262:	11 f4       	brne	.+4      	; 0x268 <traffic_light+0x134>
			PORTB=0;
 264:	15 b8       	out	0x05, r1	; 5
			PORTC=0;
 266:	18 b8       	out	0x08, r1	; 8
		}
	}
	
	
	//state7
	if(count== 14){
 268:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 26c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 270:	0e 97       	sbiw	r24, 0x0e	; 14
 272:	49 f5       	brne	.+82     	; 0x2c6 <traffic_light+0x192>
		//from count=14 to count=15, time duration=1s
		if (state==1)
 274:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 278:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	31 f4       	brne	.+12     	; 0x28c <traffic_light+0x158>
		{
			PORTB=0x24;
 280:	84 e2       	ldi	r24, 0x24	; 36
 282:	85 b9       	out	0x05, r24	; 5
			//PORTC=(1<<5)|a;
			PORTC=(PORTC&(1<<0))^(1<<5);
 284:	88 b1       	in	r24, 0x08	; 8
 286:	81 70       	andi	r24, 0x01	; 1
 288:	80 62       	ori	r24, 0x20	; 32
 28a:	88 b9       	out	0x08, r24	; 8
		}
		
		if(state==0){
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 290:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 294:	89 2b       	or	r24, r25
 296:	b9 f4       	brne	.+46     	; 0x2c6 <traffic_light+0x192>
			PORTB=0;
 298:	15 b8       	out	0x05, r1	; 5
			PORTC=0;
 29a:	18 b8       	out	0x08, r1	; 8
 29c:	14 c0       	rjmp	.+40     	; 0x2c6 <traffic_light+0x192>
	}
	
	//state8
	while((count==15)&(count<16)){
		//from count=15 to count=16, time duration=1s
		if (state==1)
 29e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	31 f4       	brne	.+12     	; 0x2b6 <traffic_light+0x182>
		{
			PORTB=0x34;
 2aa:	84 e3       	ldi	r24, 0x34	; 52
 2ac:	85 b9       	out	0x05, r24	; 5
			PORTC=(PORTC&(1<<0))^(1<<5);
 2ae:	88 b1       	in	r24, 0x08	; 8
 2b0:	81 70       	andi	r24, 0x01	; 1
 2b2:	80 62       	ori	r24, 0x20	; 32
 2b4:	88 b9       	out	0x08, r24	; 8
		}
		if(state==0){
 2b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2be:	89 2b       	or	r24, r25
 2c0:	11 f4       	brne	.+4      	; 0x2c6 <traffic_light+0x192>
			PORTB=0;
 2c2:	15 b8       	out	0x05, r1	; 5
			PORTC=0;
 2c4:	18 b8       	out	0x08, r1	; 8
			PORTC=0;
		}
	}
	
	//state8
	while((count==15)&(count<16)){
 2c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 2ca:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 2ce:	8f 30       	cpi	r24, 0x0F	; 15
 2d0:	91 05       	cpc	r25, r1
 2d2:	29 f3       	breq	.-54     	; 0x29e <traffic_light+0x16a>
			PORTB=0;
			PORTC=0;
		}
	}
	
	if(count==16){
 2d4:	40 97       	sbiw	r24, 0x10	; 16
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <traffic_light+0x1ac>
		//reset count to 0
		count=0;
 2d8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count+0x1>
 2dc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count>
 2e0:	08 95       	ret

000002e2 <__vector_11>:
	}
}

ISR(TIMER1_COMPA_vect){
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
	count++;
 2f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 2f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count+0x1>
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count+0x1>
 2fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
}
 302:	9f 91       	pop	r25
 304:	8f 91       	pop	r24
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

00000310 <__vector_2>:

ISR(INT1_vect){
 310:	1f 92       	push	r1
 312:	0f 92       	push	r0
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	0f 92       	push	r0
 318:	11 24       	eor	r1, r1
 31a:	2f 93       	push	r18
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
	state^=1;	
 320:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 324:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 328:	21 e0       	ldi	r18, 0x01	; 1
 32a:	82 27       	eor	r24, r18
 32c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 330:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <main>:

int main(void)
{
	setup();
 344:	0e 94 8b 00 	call	0x116	; 0x116 <setup>
	sei();
 348:	78 94       	sei
	while (1)
	{
		traffic_light();
 34a:	0e 94 9a 00 	call	0x134	; 0x134 <traffic_light>
 34e:	fd cf       	rjmp	.-6      	; 0x34a <main+0x6>

00000350 <_exit>:
 350:	f8 94       	cli

00000352 <__stop_program>:
 352:	ff cf       	rjmp	.-2      	; 0x352 <__stop_program>
