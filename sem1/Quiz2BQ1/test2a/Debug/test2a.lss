
test2a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000718  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000644  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029f  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037a  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  000016ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  88:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <set_timer1>:

int state=0;
int count=0;

void set_timer1(){
	OCR1A=0xF424;
  90:	84 e2       	ldi	r24, 0x24	; 36
  92:	94 ef       	ldi	r25, 0xF4	; 244
  94:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  98:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B=0x0C;//timer 1 CTC mode with prescaler 256, trigger interrupt every 1s
  9c:	8c e0       	ldi	r24, 0x0C	; 12
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1=(1<<OCIE1A);
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  a8:	08 95       	ret

000000aa <setup>:
}

void setup(){
	DDRC|=0xFF;//0x04
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	87 b9       	out	0x07, r24	; 7
	EIMSK=(1<<1);//enable INT1;
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	8d bb       	out	0x1d, r24	; 29
	EICRA=0x08;
  b4:	88 e0       	ldi	r24, 0x08	; 8
  b6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  ba:	08 95       	ret

000000bc <__vector_2>:
}


ISR(INT1_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
	state+=1;
  ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  ce:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <state+0x1>
  d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
}
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <__vector_11>:

ISR(TIMER1_COMPA_vect){
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	count++;
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <main>:


int main(void)
{
	setup();
 118:	0e 94 55 00 	call	0xaa	; 0xaa <setup>
	sei();
 11c:	78 94       	sei
	set_timer1();
 11e:	0e 94 48 00 	call	0x90	; 0x90 <set_timer1>
	while (1)
	{
		if(state==0)
 122:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 126:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 12a:	89 2b       	or	r24, r25
 12c:	c9 f4       	brne	.+50     	; 0x160 <main+0x48>
		{
			if (count==0)
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	89 2b       	or	r24, r25
 138:	11 f4       	brne	.+4      	; 0x13e <main+0x26>
			{
				PORTC=0x01;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	88 b9       	out	0x08, r24	; 8
			}
			if (count==1)
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 142:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	09 f4       	brne	.+2      	; 0x14c <main+0x34>
			{
				PORTC=0;
 14a:	18 b8       	out	0x08, r1	; 8
			}
			if (count==2)
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 150:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 154:	02 97       	sbiw	r24, 0x02	; 2
 156:	21 f4       	brne	.+8      	; 0x160 <main+0x48>
			{
				count=0;
 158:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
		}
		if(state==1){
 160:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 164:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	09 f4       	brne	.+2      	; 0x16e <main+0x56>
			PORTC=0;
 16c:	18 b8       	out	0x08, r1	; 8
		}
		if (state==2)
 16e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
 172:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <state+0x1>
 176:	02 97       	sbiw	r24, 0x02	; 2
 178:	a1 f6       	brne	.-88     	; 0x122 <main+0xa>
		{
			state=0;
 17a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state+0x1>
 17e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 182:	cf cf       	rjmp	.-98     	; 0x122 <main+0xa>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
