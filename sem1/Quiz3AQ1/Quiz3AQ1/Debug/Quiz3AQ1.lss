
Quiz3AQ1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006dc  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000632  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000265  00000000  00000000  00000f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000366  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  000015ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_18>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 aa 00 	call	0x154	; 0x154 <main>
  88:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_19>:

#define X ((16000000/16/9600) - 1)

int state=0;
char a=0;
ISR(USART_UDRE_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	if (state==1)
  9e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  a2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state+0x1>
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	61 f4       	brne	.+24     	; 0xc2 <__vector_19+0x32>
	{
		UDR0='A';
  aa:	81 e4       	ldi	r24, 0x41	; 65
  ac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		state++;
  b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  b4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state+0x1>
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
  be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
	}
	if (state==2)
  c2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  c6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state+0x1>
  ca:	02 97       	sbiw	r24, 0x02	; 2
  cc:	69 f4       	brne	.+26     	; 0xe8 <__vector_19+0x58>
	{
		UDR0=a;
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		state++;
  d6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  da:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
  e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
	}
	
	if (state==3)
  e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  ec:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state+0x1>
  f0:	03 97       	sbiw	r24, 0x03	; 3
  f2:	59 f4       	brne	.+22     	; 0x10a <__vector_19+0x7a>
	{
		while(!(UCSR0A&(1<<UDRE0)));
  f4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f8:	85 ff       	sbrs	r24, 5
  fa:	fc cf       	rjmp	.-8      	; 0xf4 <__vector_19+0x64>
		UDR0='a';
  fc:	81 e6       	ldi	r24, 0x61	; 97
  fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		state=0;
 102:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state+0x1>
 106:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
	}
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_18>:
ISR(USART_RX_vect){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
	if (state==0)
 126:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 12a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state+0x1>
 12e:	89 2b       	or	r24, r25
 130:	51 f4       	brne	.+20     	; 0x146 <__vector_18+0x2e>
	{
		a=UDR0;
 132:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		state=1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <state+0x1>
 142:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
	}

}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <main>:

int main(void){
	UBRR0 = X;
 154:	87 e6       	ldi	r24, 0x67	; 103
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 15c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//transmit and receive enable
	UCSR0B = (1 << TXEN0)| (1 << UDRIE0) | (1 << RXEN0) | (1 << RXCIE0);
 160:	88 eb       	ldi	r24, 0xB8	; 184
 162:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	sei();
 16c:	78 94       	sei
 16e:	ff cf       	rjmp	.-2      	; 0x16e <main+0x1a>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
