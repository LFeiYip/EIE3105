
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000136  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b6  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  00000a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000310  00000000  00000000  000010c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000370  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000041  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001809  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <send>:
}

char re() {
	while( !( UCSR0A & (1<<UDRE0)) );
	return UDR0;
}
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	95 ff       	sbrs	r25, 5
  88:	fd cf       	rjmp	.-6      	; 0x84 <send+0x4>
  8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  8e:	08 95       	ret

00000090 <tim0_init>:

void tim0_init(){
	//timer0 generate PWM
	TCCR0A = (1<<COM0A1)|(0<<COM0A0)|(1<<COM0B1)|(0<<COM0B0)|(1<<WGM01)|(1<<WGM00);
  90:	83 ea       	ldi	r24, 0xA3	; 163
  92:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<WGM02)|(0<<CS02)|(1<<CS01)|(1<<CS00);//PRESCALING 64
  94:	8b e0       	ldi	r24, 0x0B	; 11
  96:	85 bd       	out	0x25, r24	; 37
	OCR0A = 250;//500Hz
  98:	8a ef       	ldi	r24, 0xFA	; 250
  9a:	87 bd       	out	0x27, r24	; 39
	OCR0B = 125;//50% DUTY CYCLE
  9c:	8d e7       	ldi	r24, 0x7D	; 125
  9e:	88 bd       	out	0x28, r24	; 40
  a0:	08 95       	ret

000000a2 <tim1_init>:
}

void tim1_init(){
	//timer 1 capture PWM
	TCCR1A =0;
  a2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B=(1<<ICES1)|(0<<CS12)|(1<<CS11)|(1<<CS10);
  a6:	83 e4       	ldi	r24, 0x43	; 67
  a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIFR1 = (1<<ICF1);
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	86 bb       	out	0x16, r24	; 22
  b0:	08 95       	ret

000000b2 <usart_init>:
}

void usart_init(){
	UCSR0B=(1<<TXEN0)|(1<<RXEN0);
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);	
  b8:	86 e0       	ldi	r24, 0x06	; 6
  ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UBRR0L =(16000000/16/9600) - 1;
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  c4:	08 95       	ret

000000c6 <check_pulse_width>:
}

char check_pulse_width(){
	while((TIFR1&(1<<ICF1))==0);
  c6:	b5 9b       	sbis	0x16, 5	; 22
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <check_pulse_width>
	unsigned char t1= ICR1L;
  ca:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	TIFR1=(1<<ICF1);
  ce:	80 e2       	ldi	r24, 0x20	; 32
  d0:	86 bb       	out	0x16, r24	; 22
	TCCR1B=(0<<ICES1)|(1<<CS12)|(0<<CS11)|(0<<CS10);
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	while((TIFR1&(1<<ICF1))==0);
  d8:	b5 9b       	sbis	0x16, 5	; 22
  da:	fe cf       	rjmp	.-4      	; 0xd8 <check_pulse_width+0x12>
	unsigned char c=ICR1L-t1;
  dc:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	TIFR1=(1<<ICF1);
  e0:	20 e2       	ldi	r18, 0x20	; 32
  e2:	26 bb       	out	0x16, r18	; 22
	return c;
}
  e4:	89 1b       	sub	r24, r25
  e6:	08 95       	ret

000000e8 <main>:

int main(void)
{
    /* Replace with your application code */
	tim0_init();
  e8:	0e 94 48 00 	call	0x90	; 0x90 <tim0_init>
	tim1_init();
  ec:	0e 94 51 00 	call	0xa2	; 0xa2 <tim1_init>
	usart_init();
  f0:	0e 94 59 00 	call	0xb2	; 0xb2 <usart_init>
	DDRB=0x00; //pb0 input
  f4:	14 b8       	out	0x04, r1	; 4
	DDRD = 0b00100000;
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	8a b9       	out	0x0a, r24	; 10

	while(1){
		unsigned char c=check_pulse_width();
		send(c/10+ '0');
  fa:	1d ec       	ldi	r17, 0xCD	; 205
	usart_init();
	DDRB=0x00; //pb0 input
	DDRD = 0b00100000;

	while(1){
		unsigned char c=check_pulse_width();
  fc:	0e 94 63 00 	call	0xc6	; 0xc6 <check_pulse_width>
 100:	d8 2f       	mov	r29, r24
		send(c/10+ '0');
 102:	81 9f       	mul	r24, r17
 104:	c1 2d       	mov	r28, r1
 106:	11 24       	eor	r1, r1
 108:	c6 95       	lsr	r28
 10a:	c6 95       	lsr	r28
 10c:	c6 95       	lsr	r28
 10e:	80 e3       	ldi	r24, 0x30	; 48
 110:	8c 0f       	add	r24, r28
 112:	0e 94 40 00 	call	0x80	; 0x80 <send>
		send(c%10+ '0');
 116:	cc 0f       	add	r28, r28
 118:	8c 2f       	mov	r24, r28
 11a:	88 0f       	add	r24, r24
 11c:	88 0f       	add	r24, r24
 11e:	c8 0f       	add	r28, r24
 120:	8d 2f       	mov	r24, r29
 122:	8c 1b       	sub	r24, r28
 124:	80 5d       	subi	r24, 0xD0	; 208
 126:	0e 94 40 00 	call	0x80	; 0x80 <send>
		send(' ');
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	0e 94 40 00 	call	0x80	; 0x80 <send>
 130:	e5 cf       	rjmp	.-54     	; 0xfc <main+0x14>

00000132 <_exit>:
 132:	f8 94       	cli

00000134 <__stop_program>:
 134:	ff cf       	rjmp	.-2      	; 0x134 <__stop_program>
