
e.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001d2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000771  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c1  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b3  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001819  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6f 00 	call	0xde	; 0xde <main>
  8e:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init>:
}


void init(){
	
	UCSR0B=(1<<TXEN0)|(1<<RXEN0);
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0L = X;
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	TCCR0A = (1<<WGM00) | (1<<WGM01) | (0<<COM0A0) | (0<<COM0B0) | (1<<COM0B1);
  a8:	83 e2       	ldi	r24, 0x23	; 35
  aa:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<WGM02) | (0<<CS00) | (0<<CS01) | (1<<CS02);   //pre-scalar 256
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	85 bd       	out	0x25, r24	; 37
	
	OCR0A = 125;  // frePWM=16000000/125*256=500
  b0:	8d e7       	ldi	r24, 0x7D	; 125
  b2:	87 bd       	out	0x27, r24	; 39
	OCR0B = 62;
  b4:	8e e3       	ldi	r24, 0x3E	; 62
  b6:	88 bd       	out	0x28, r24	; 40
	DDRD=0xff;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8a b9       	out	0x0a, r24	; 10
  bc:	08 95       	ret

000000be <receive>:
	
}

unsigned char receive(void){
	while( !( UCSR0A & (1<<RXC0)) );
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 23       	and	r24, r24
  c6:	ec f7       	brge	.-6      	; 0xc2 <receive+0x4>
	return UDR0;
  c8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  cc:	08 95       	ret

000000ce <send>:


void send(char data) {
	while( !( UCSR0A & (1<<UDRE0)) );
  ce:	e0 ec       	ldi	r30, 0xC0	; 192
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	95 ff       	sbrs	r25, 5
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <send+0x4>
	UDR0 = data;
  d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  dc:	08 95       	ret

000000de <main>:
void init();
void send(char data);
unsigned char receive(void);

int main(void)
{
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	2f 97       	sbiw	r28, 0x0f	; 15
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
	init();
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <init>
	unsigned char a[] = " Input value: ";
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	de 01       	movw	r26, r28
  fe:	11 96       	adiw	r26, 0x01	; 1
 100:	01 90       	ld	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	8a 95       	dec	r24
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x22>
	unsigned int p = 0;
 108:	c1 2c       	mov	r12, r1
 10a:	d1 2c       	mov	r13, r1
 10c:	7e 01       	movw	r14, r28
 10e:	81 e1       	ldi	r24, 0x11	; 17
 110:	e8 0e       	add	r14, r24
 112:	f1 1c       	adc	r15, r1
		}

		send(p / 10 + '0');
		send(p % 10 + '0');
		OCR0B=p-1;
		p= 0;
 114:	a1 2c       	mov	r10, r1
 116:	b1 2c       	mov	r11, r1
 118:	16 c0       	rjmp	.+44     	; 0x146 <main+0x68>
	while (1)
	{
		
		
		while(p < 10) {
			temp = receive();
 11a:	0e 94 5f 00 	call	0xbe	; 0xbe <receive>
			if(temp>= '0' && temp <= '9') {
 11e:	90 ed       	ldi	r25, 0xD0	; 208
 120:	98 0f       	add	r25, r24
 122:	9a 30       	cpi	r25, 0x0A	; 10
 124:	80 f4       	brcc	.+32     	; 0x146 <main+0x68>
 126:	96 01       	movw	r18, r12
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	cc 0c       	add	r12, r12
 12e:	dd 1c       	adc	r13, r13
 130:	cc 0c       	add	r12, r12
 132:	dd 1c       	adc	r13, r13
 134:	cc 0c       	add	r12, r12
 136:	dd 1c       	adc	r13, r13
 138:	c2 0e       	add	r12, r18
 13a:	d3 1e       	adc	r13, r19
 13c:	90 e3       	ldi	r25, 0x30	; 48
 13e:	c9 1a       	sub	r12, r25
 140:	d1 08       	sbc	r13, r1
				p = p * 10 + temp - '0';
 142:	c8 0e       	add	r12, r24
 144:	d1 1c       	adc	r13, r1
	
	while (1)
	{
		
		
		while(p < 10) {
 146:	ea e0       	ldi	r30, 0x0A	; 10
 148:	ce 16       	cp	r12, r30
 14a:	d1 04       	cpc	r13, r1
 14c:	30 f3       	brcs	.-52     	; 0x11a <main+0x3c>
 14e:	8e 01       	movw	r16, r28
 150:	0f 5f       	subi	r16, 0xFF	; 255
 152:	1f 4f       	sbci	r17, 0xFF	; 255
			}
		}

		for(int i=0;i<16;i++)
		{
			send(a[i]);
 154:	f8 01       	movw	r30, r16
 156:	81 91       	ld	r24, Z+
 158:	8f 01       	movw	r16, r30
 15a:	0e 94 67 00 	call	0xce	; 0xce <send>
			if(temp>= '0' && temp <= '9') {
				p = p * 10 + temp - '0';
			}
		}

		for(int i=0;i<16;i++)
 15e:	0e 15       	cp	r16, r14
 160:	1f 05       	cpc	r17, r15
 162:	c1 f7       	brne	.-16     	; 0x154 <main+0x76>
		{
			send(a[i]);
		}

		send(p / 10 + '0');
 164:	96 01       	movw	r18, r12
 166:	ad ec       	ldi	r26, 0xCD	; 205
 168:	bc ec       	ldi	r27, 0xCC	; 204
 16a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__umulhisi3>
 16e:	8c 01       	movw	r16, r24
 170:	16 95       	lsr	r17
 172:	07 95       	ror	r16
 174:	16 95       	lsr	r17
 176:	07 95       	ror	r16
 178:	16 95       	lsr	r17
 17a:	07 95       	ror	r16
 17c:	80 e3       	ldi	r24, 0x30	; 48
 17e:	80 0f       	add	r24, r16
 180:	0e 94 67 00 	call	0xce	; 0xce <send>
		send(p % 10 + '0');
 184:	c8 01       	movw	r24, r16
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	00 0f       	add	r16, r16
 18c:	11 1f       	adc	r17, r17
 18e:	00 0f       	add	r16, r16
 190:	11 1f       	adc	r17, r17
 192:	00 0f       	add	r16, r16
 194:	11 1f       	adc	r17, r17
 196:	08 0f       	add	r16, r24
 198:	19 1f       	adc	r17, r25
 19a:	c6 01       	movw	r24, r12
 19c:	80 1b       	sub	r24, r16
 19e:	91 0b       	sbc	r25, r17
 1a0:	80 5d       	subi	r24, 0xD0	; 208
 1a2:	0e 94 67 00 	call	0xce	; 0xce <send>
		OCR0B=p-1;
 1a6:	ca 94       	dec	r12
 1a8:	c8 bc       	out	0x28, r12	; 40
		p= 0;
 1aa:	ca 2c       	mov	r12, r10
 1ac:	db 2c       	mov	r13, r11

	}
 1ae:	cb cf       	rjmp	.-106    	; 0x146 <main+0x68>

000001b0 <__umulhisi3>:
 1b0:	a2 9f       	mul	r26, r18
 1b2:	b0 01       	movw	r22, r0
 1b4:	b3 9f       	mul	r27, r19
 1b6:	c0 01       	movw	r24, r0
 1b8:	a3 9f       	mul	r26, r19
 1ba:	70 0d       	add	r23, r0
 1bc:	81 1d       	adc	r24, r1
 1be:	11 24       	eor	r1, r1
 1c0:	91 1d       	adc	r25, r1
 1c2:	b2 9f       	mul	r27, r18
 1c4:	70 0d       	add	r23, r0
 1c6:	81 1d       	adc	r24, r1
 1c8:	11 24       	eor	r1, r1
 1ca:	91 1d       	adc	r25, r1
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
