
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000364  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000741  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065d  00000000  00000000  00000ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046f  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  00001a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001bb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  78:	0c 94 b0 01 	jmp	0x360	; 0x360 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <usart_init>:

#include <avr/io.h>

void usart_init (void){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
	UCSR0B=(1<<TXEN0) | (1<<RXEN0);
  88:	81 ec       	ldi	r24, 0xC1	; 193
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	28 e1       	ldi	r18, 0x18	; 24
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	UCSR0C=(1<<UCSZ01) | (1<<UCSZ00);
  92:	82 ec       	ldi	r24, 0xC2	; 194
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	26 e0       	ldi	r18, 0x06	; 6
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
	UBRR0L=0X67;//baud rate 9600
  9c:	84 ec       	ldi	r24, 0xC4	; 196
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	27 e6       	ldi	r18, 0x67	; 103
  a2:	fc 01       	movw	r30, r24
  a4:	20 83       	st	Z, r18
}
  a6:	00 00       	nop
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <usart_send>:
void usart_send (unsigned char ch){
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	1f 92       	push	r1
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSR0A & (1<<UDRE0)));
  ba:	00 00       	nop
  bc:	80 ec       	ldi	r24, 0xC0	; 192
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	fc 01       	movw	r30, r24
  c2:	80 81       	ld	r24, Z
  c4:	88 2f       	mov	r24, r24
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	80 72       	andi	r24, 0x20	; 32
  ca:	99 27       	eor	r25, r25
  cc:	89 2b       	or	r24, r25
  ce:	b1 f3       	breq	.-20     	; 0xbc <usart_send+0xe>
	UDR0=ch;
  d0:	86 ec       	ldi	r24, 0xC6	; 198
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	29 81       	ldd	r18, Y+1	; 0x01
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
}
  da:	00 00       	nop
  dc:	0f 90       	pop	r0
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <delay_10ms>:
void delay_10ms()
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	1f 92       	push	r1
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00; // CTC TOP = OCR1A
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	fc 01       	movw	r30, r24
  f4:	10 82       	st	Z, r1
	TCCR1B = 0x0B; // Prescaler = 64
  f6:	81 e8       	ldi	r24, 0x81	; 129
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	2b e0       	ldi	r18, 0x0B	; 11
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
	OCR1A = 2500; //2500*(1/(16MHz/64))=10ms
 100:	88 e8       	ldi	r24, 0x88	; 136
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	24 ec       	ldi	r18, 0xC4	; 196
 106:	39 e0       	ldi	r19, 0x09	; 9
 108:	fc 01       	movw	r30, r24
 10a:	31 83       	std	Z+1, r19	; 0x01
 10c:	20 83       	st	Z, r18
	
	unsigned char count = 0;
 10e:	19 82       	std	Y+1, r1	; 0x01
	while (count < 1) 
 110:	13 c0       	rjmp	.+38     	; 0x138 <delay_10ms+0x54>
	{
		while(!(TIFR1 & (1<<OCF1A))) ;
 112:	00 00       	nop
 114:	86 e3       	ldi	r24, 0x36	; 54
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	80 81       	ld	r24, Z
 11c:	88 2f       	mov	r24, r24
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	82 70       	andi	r24, 0x02	; 2
 122:	99 27       	eor	r25, r25
 124:	89 2b       	or	r24, r25
 126:	b1 f3       	breq	.-20     	; 0x114 <delay_10ms+0x30>
		TIFR1 = (1<<OCF1A);
 128:	86 e3       	ldi	r24, 0x36	; 54
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	22 e0       	ldi	r18, 0x02	; 2
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
		count++;
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = 0x00; // CTC TOP = OCR1A
	TCCR1B = 0x0B; // Prescaler = 64
	OCR1A = 2500; //2500*(1/(16MHz/64))=10ms
	
	unsigned char count = 0;
	while (count < 1) 
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	88 23       	and	r24, r24
 13c:	51 f3       	breq	.-44     	; 0x112 <delay_10ms+0x2e>
	{
		while(!(TIFR1 & (1<<OCF1A))) ;
		TIFR1 = (1<<OCF1A);
		count++;
	}
}
 13e:	00 00       	nop
 140:	0f 90       	pop	r0
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <main>:


int main(void)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	28 97       	sbiw	r28, 0x08	; 8
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
	unsigned char colloc, rowloc=5, column=5;
 15c:	85 e0       	ldi	r24, 0x05	; 5
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	85 e0       	ldi	r24, 0x05	; 5
 162:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char state=0;
 164:	1f 82       	std	Y+7, r1	; 0x07
	unsigned int  flag;
	unsigned int count = 0;//to count the do while loop
 166:	1e 82       	std	Y+6, r1	; 0x06
 168:	1d 82       	std	Y+5, r1	; 0x05
	usart_init();
 16a:	0e 94 40 00 	call	0x80	; 0x80 <usart_init>
	
	DDRD= 0x00;
 16e:	8a e2       	ldi	r24, 0x2A	; 42
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	fc 01       	movw	r30, r24
 174:	10 82       	st	Z, r1
	PORTD=0xFF;
 176:	8b e2       	ldi	r24, 0x2B	; 43
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
	DDRB=0xFF;
 180:	84 e2       	ldi	r24, 0x24	; 36
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
	PORTB=0x00;
 18a:	85 e2       	ldi	r24, 0x25	; 37
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	fc 01       	movw	r30, r24
 190:	10 82       	st	Z, r1

	while (1) 
	{	
		do
		{
			PORTB = 0xF8; //ground all rows at once
 192:	85 e2       	ldi	r24, 0x25	; 37
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	28 ef       	ldi	r18, 0xF8	; 248
 198:	fc 01       	movw	r30, r24
 19a:	20 83       	st	Z, r18
			colloc=(PIND & 0x0C); //read the columns
 19c:	89 e2       	ldi	r24, 0x29	; 41
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	fc 01       	movw	r30, r24
 1a2:	80 81       	ld	r24, Z
 1a4:	8c 70       	andi	r24, 0x0C	; 12
 1a6:	88 87       	std	Y+8, r24	; 0x08
		} while (colloc != 0x0C); //check until all keys released
 1a8:	88 85       	ldd	r24, Y+8	; 0x08
 1aa:	8c 30       	cpi	r24, 0x0C	; 12
 1ac:	91 f7       	brne	.-28     	; 0x192 <main+0x4a>
		PORTB = 0xF8; //ground all rows at once
 1ae:	85 e2       	ldi	r24, 0x25	; 37
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	28 ef       	ldi	r18, 0xF8	; 248
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
		state=1;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	8f 83       	std	Y+7, r24	; 0x07
		do
		{
			state = 0;
 1bc:	1f 82       	std	Y+7, r1	; 0x07
			do
			{	
				if(count>=1)
 1be:	8d 81       	ldd	r24, Y+5	; 0x05
 1c0:	9e 81       	ldd	r25, Y+6	; 0x06
 1c2:	89 2b       	or	r24, r25
 1c4:	31 f0       	breq	.+12     	; 0x1d2 <main+0x8a>
				{
					if(state==0){
 1c6:	8f 81       	ldd	r24, Y+7	; 0x07
 1c8:	88 23       	and	r24, r24
 1ca:	19 f4       	brne	.+6      	; 0x1d2 <main+0x8a>
						usart_send('-1');
 1cc:	81 e3       	ldi	r24, 0x31	; 49
 1ce:	0e 94 57 00 	call	0xae	; 0xae <usart_send>
						}	
				}
				count++;
 1d2:	8d 81       	ldd	r24, Y+5	; 0x05
 1d4:	9e 81       	ldd	r25, Y+6	; 0x06
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	9e 83       	std	Y+6, r25	; 0x06
 1da:	8d 83       	std	Y+5, r24	; 0x05
				delay_10ms();  //call delay
 1dc:	0e 94 72 00 	call	0xe4	; 0xe4 <delay_10ms>
				colloc=(PIND & 0x0C); //see if any key is pressed
 1e0:	89 e2       	ldi	r24, 0x29	; 41
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	fc 01       	movw	r30, r24
 1e6:	80 81       	ld	r24, Z
 1e8:	8c 70       	andi	r24, 0x0C	; 12
 1ea:	88 87       	std	Y+8, r24	; 0x08
			} while (colloc == 0x0C); //keep checking for key press
 1ec:	88 85       	ldd	r24, Y+8	; 0x08
 1ee:	8c 30       	cpi	r24, 0x0C	; 12
 1f0:	31 f3       	breq	.-52     	; 0x1be <main+0x76>
			colloc=(PIND & 0x0C); //read columns
 1f2:	89 e2       	ldi	r24, 0x29	; 41
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	8c 70       	andi	r24, 0x0C	; 12
 1fc:	88 87       	std	Y+8, r24	; 0x08
			
		} while (colloc == 0x0C);
 1fe:	88 85       	ldd	r24, Y+8	; 0x08
 200:	8c 30       	cpi	r24, 0x0C	; 12
 202:	e1 f2       	breq	.-72     	; 0x1bc <main+0x74>
		
		count = 0;
 204:	1e 82       	std	Y+6, r1	; 0x06
 206:	1d 82       	std	Y+5, r1	; 0x05
		while(1)
		{
			flag=0;
 208:	1c 82       	std	Y+4, r1	; 0x04
 20a:	1b 82       	std	Y+3, r1	; 0x03
			PORTB = 0xFE; //ground row 0
 20c:	85 e2       	ldi	r24, 0x25	; 37
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	2e ef       	ldi	r18, 0xFE	; 254
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
			delay_10ms();  //call delay
 216:	0e 94 72 00 	call	0xe4	; 0xe4 <delay_10ms>
			colloc=(PIND & 0x0C); //read columns
 21a:	89 e2       	ldi	r24, 0x29	; 41
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	8c 70       	andi	r24, 0x0C	; 12
 224:	88 87       	std	Y+8, r24	; 0x08
			
			if(colloc != 0x0C) //column detected
 226:	88 85       	ldd	r24, Y+8	; 0x08
 228:	8c 30       	cpi	r24, 0x0C	; 12
 22a:	69 f0       	breq	.+26     	; 0x246 <main+0xfe>
			{
				rowloc=0;  //save row location
 22c:	19 82       	std	Y+1, r1	; 0x01
				if(colloc==0x08)	column=0;
 22e:	88 85       	ldd	r24, Y+8	; 0x08
 230:	88 30       	cpi	r24, 0x08	; 8
 232:	11 f4       	brne	.+4      	; 0x238 <main+0xf0>
 234:	1a 82       	std	Y+2, r1	; 0x02
 236:	02 c0       	rjmp	.+4      	; 0x23c <main+0xf4>
				else				column=1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	8a 83       	std	Y+2, r24	; 0x02
				flag++;
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	9c 81       	ldd	r25, Y+4	; 0x04
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	9c 83       	std	Y+4, r25	; 0x04
 244:	8b 83       	std	Y+3, r24	; 0x03
			}
			
			PORTB=0xFD; //ground row 1
 246:	85 e2       	ldi	r24, 0x25	; 37
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2d ef       	ldi	r18, 0xFD	; 253
 24c:	fc 01       	movw	r30, r24
 24e:	20 83       	st	Z, r18
			delay_10ms();  //call delay
 250:	0e 94 72 00 	call	0xe4	; 0xe4 <delay_10ms>
			colloc=(PIND & 0x0C); //read columns
 254:	89 e2       	ldi	r24, 0x29	; 41
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	fc 01       	movw	r30, r24
 25a:	80 81       	ld	r24, Z
 25c:	8c 70       	andi	r24, 0x0C	; 12
 25e:	88 87       	std	Y+8, r24	; 0x08
			
			if(colloc != 0x0C) //column detected
 260:	88 85       	ldd	r24, Y+8	; 0x08
 262:	8c 30       	cpi	r24, 0x0C	; 12
 264:	71 f0       	breq	.+28     	; 0x282 <main+0x13a>
			{
				rowloc=1;  //save row location
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	89 83       	std	Y+1, r24	; 0x01
				if(colloc==0x08){column=0;}
 26a:	88 85       	ldd	r24, Y+8	; 0x08
 26c:	88 30       	cpi	r24, 0x08	; 8
 26e:	11 f4       	brne	.+4      	; 0x274 <main+0x12c>
 270:	1a 82       	std	Y+2, r1	; 0x02
 272:	02 c0       	rjmp	.+4      	; 0x278 <main+0x130>
				else{column=1;}
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	8a 83       	std	Y+2, r24	; 0x02
				flag++;
 278:	8b 81       	ldd	r24, Y+3	; 0x03
 27a:	9c 81       	ldd	r25, Y+4	; 0x04
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	9c 83       	std	Y+4, r25	; 0x04
 280:	8b 83       	std	Y+3, r24	; 0x03
			}
			
			PORTB=0xFB; //ground row 2
 282:	85 e2       	ldi	r24, 0x25	; 37
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	2b ef       	ldi	r18, 0xFB	; 251
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
			delay_10ms();  //call delay
 28c:	0e 94 72 00 	call	0xe4	; 0xe4 <delay_10ms>
			colloc=(PIND & 0x0C); //read columns
 290:	89 e2       	ldi	r24, 0x29	; 41
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	80 81       	ld	r24, Z
 298:	8c 70       	andi	r24, 0x0C	; 12
 29a:	88 87       	std	Y+8, r24	; 0x08
			
			if(colloc != 0x0C) //column detected
 29c:	88 85       	ldd	r24, Y+8	; 0x08
 29e:	8c 30       	cpi	r24, 0x0C	; 12
 2a0:	71 f0       	breq	.+28     	; 0x2be <main+0x176>
			{
				rowloc=2;  
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	89 83       	std	Y+1, r24	; 0x01
				if(colloc==0x08)	column=0;
 2a6:	88 85       	ldd	r24, Y+8	; 0x08
 2a8:	88 30       	cpi	r24, 0x08	; 8
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <main+0x168>
 2ac:	1a 82       	std	Y+2, r1	; 0x02
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <main+0x16c>
				else				column=1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	8a 83       	std	Y+2, r24	; 0x02
				flag++;
 2b4:	8b 81       	ldd	r24, Y+3	; 0x03
 2b6:	9c 81       	ldd	r25, Y+4	; 0x04
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	9c 83       	std	Y+4, r25	; 0x04
 2bc:	8b 83       	std	Y+3, r24	; 0x03
			}
			
			if(flag==3){
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	9c 81       	ldd	r25, Y+4	; 0x04
 2c2:	03 97       	sbiw	r24, 0x03	; 3
 2c4:	c9 f4       	brne	.+50     	; 0x2f8 <main+0x1b0>
				if(colloc == 0x04){
 2c6:	88 85       	ldd	r24, Y+8	; 0x08
 2c8:	84 30       	cpi	r24, 0x04	; 4
 2ca:	41 f4       	brne	.+16     	; 0x2dc <main+0x194>
					state = 1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	8f 83       	std	Y+7, r24	; 0x07
					usart_send('i');
 2d0:	89 e6       	ldi	r24, 0x69	; 105
 2d2:	0e 94 57 00 	call	0xae	; 0xae <usart_send>
					rowloc=3;
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	89 83       	std	Y+1, r24	; 0x01
					break;
 2da:	0f c0       	rjmp	.+30     	; 0x2fa <main+0x1b2>
				}
				else if(colloc == 0x08){
 2dc:	88 85       	ldd	r24, Y+8	; 0x08
 2de:	88 30       	cpi	r24, 0x08	; 8
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <main+0x19c>
 2e2:	92 cf       	rjmp	.-220    	; 0x208 <main+0xc0>
					state = 1;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	8f 83       	std	Y+7, r24	; 0x07
					usart_send('w');
 2e8:	87 e7       	ldi	r24, 0x77	; 119
 2ea:	0e 94 57 00 	call	0xae	; 0xae <usart_send>
					colloc=0x0C;
 2ee:	8c e0       	ldi	r24, 0x0C	; 12
 2f0:	88 87       	std	Y+8, r24	; 0x08
					rowloc=3;
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	89 83       	std	Y+1, r24	; 0x01
					break;
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <main+0x1b2>
				}
			}
			else  {break;}
 2f8:	00 00       	nop
			
		}

		if(column==0){
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	88 23       	and	r24, r24
 2fe:	b1 f4       	brne	.+44     	; 0x32c <main+0x1e4>
			state = 1;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	8f 83       	std	Y+7, r24	; 0x07
			if(rowloc==0){
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	88 23       	and	r24, r24
 308:	19 f4       	brne	.+6      	; 0x310 <main+0x1c8>
				usart_send('d');
 30a:	84 e6       	ldi	r24, 0x64	; 100
 30c:	0e 94 57 00 	call	0xae	; 0xae <usart_send>
			}
			if(rowloc==1){
 310:	89 81       	ldd	r24, Y+1	; 0x01
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	19 f4       	brne	.+6      	; 0x31c <main+0x1d4>
				usart_send('s');
 316:	83 e7       	ldi	r24, 0x73	; 115
 318:	0e 94 57 00 	call	0xae	; 0xae <usart_send>
			}
			if (rowloc==2){
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	09 f0       	breq	.+2      	; 0x324 <main+0x1dc>
 322:	37 cf       	rjmp	.-402    	; 0x192 <main+0x4a>
				usart_send('a');
 324:	81 e6       	ldi	r24, 0x61	; 97
 326:	0e 94 57 00 	call	0xae	; 0xae <usart_send>
 32a:	33 cf       	rjmp	.-410    	; 0x192 <main+0x4a>
			}
			
			
		}
		//column 1
		else if(column==1){
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	09 f0       	breq	.+2      	; 0x334 <main+0x1ec>
 332:	2f cf       	rjmp	.-418    	; 0x192 <main+0x4a>
			state = 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	8f 83       	std	Y+7, r24	; 0x07
			if(rowloc==0){
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 23       	and	r24, r24
 33c:	19 f4       	brne	.+6      	; 0x344 <main+0x1fc>
				usart_send('j');
 33e:	8a e6       	ldi	r24, 0x6A	; 106
 340:	0e 94 57 00 	call	0xae	; 0xae <usart_send>
			}
			if(rowloc==1){
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	19 f4       	brne	.+6      	; 0x350 <main+0x208>
				usart_send('l');
 34a:	8c e6       	ldi	r24, 0x6C	; 108
 34c:	0e 94 57 00 	call	0xae	; 0xae <usart_send>
			}
			if(rowloc==2){
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	82 30       	cpi	r24, 0x02	; 2
 354:	09 f0       	breq	.+2      	; 0x358 <main+0x210>
 356:	1d cf       	rjmp	.-454    	; 0x192 <main+0x4a>
				usart_send('k');
 358:	8b e6       	ldi	r24, 0x6B	; 107
 35a:	0e 94 57 00 	call	0xae	; 0xae <usart_send>
			}
		}
		
	}
 35e:	19 cf       	rjmp	.-462    	; 0x192 <main+0x4a>

00000360 <_exit>:
 360:	f8 94       	cli

00000362 <__stop_program>:
 362:	ff cf       	rjmp	.-2      	; 0x362 <__stop_program>
